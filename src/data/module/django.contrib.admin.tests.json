{
  "functions": [],
  "classes": [
    {
      "name": "CSPMiddleware",
      "methods": [
        {
          "name": "process_response",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "request",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "response",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"The admin's JavaScript should be compatible with CSP.\"\"\""
    },
    {
      "name": "AdminSeleniumTestCase",
      "methods": [
        {
          "name": "wait_until",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "callback",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block the execution of the tests until the specified callback returns a\n        value that is not falsy. This method can be called, for example, after\n        clicking a link or submitting a form. See the other public methods that\n        call this function for more details.\n        \"\"\""
        },
        {
          "name": "wait_for_and_switch_to_popup",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "num_windows",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until `num_windows` are present and are ready (usually 2, but can\n        be overridden in the case of pop-ups opening other pop-ups). Switch the\n        current window to the new pop-up.\n        \"\"\""
        },
        {
          "name": "wait_for",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "css_selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until a CSS selector is found on the page.\n        \"\"\""
        },
        {
          "name": "wait_for_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "css_selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "text",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until the text is found in the CSS selector.\n        \"\"\""
        },
        {
          "name": "wait_for_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "css_selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "text",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until the value is found in the CSS selector.\n        \"\"\""
        },
        {
          "name": "wait_until_visible",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "css_selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until the element described by the CSS selector is visible.\n        \"\"\""
        },
        {
          "name": "wait_until_invisible",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "css_selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until the element described by the CSS selector is invisible.\n        \"\"\""
        },
        {
          "name": "wait_page_ready",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Block until the  page is ready.\n        \"\"\""
        },
        {
          "name": "wait_page_loaded",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@contextmanager"
            }
          ],
          "docstring": "\"\"\"\n        Block until a new page has loaded and is ready.\n        \"\"\""
        },
        {
          "name": "admin_login",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "username",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "password",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "login_url",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Log in to the admin.\n        \"\"\""
        },
        {
          "name": "select_option",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Select the <OPTION> with the value `value` inside the <SELECT> widget\n        identified by the CSS selector `selector`.\n        \"\"\""
        },
        {
          "name": "deselect_option",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Deselect the <OPTION> with the value `value` inside the <SELECT> widget\n        identified by the CSS selector `selector`.\n        \"\"\""
        },
        {
          "name": "assertSelectOptions",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Assert that the <SELECT> widget identified by `selector` has the\n        options with the given `values`.\n        \"\"\""
        },
        {
          "name": "assertSelectedOptions",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Assert that the <SELECT> widget identified by `selector` has the\n        selected options with the given `values`.\n        \"\"\""
        },
        {
          "name": "has_css_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "selector",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "klass",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return True if the element identified by `selector` has the CSS class\n        `klass`.\n        \"\"\""
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@modify_settings(MIDDLEWARE={'append': 'django.contrib.admin.tests.CSPMiddleware'})"
        }
      ]
    }
  ]
}