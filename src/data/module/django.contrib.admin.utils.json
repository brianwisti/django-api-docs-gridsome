{
  "functions": [
    {
      "name": "lookup_spawns_duplicates",
      "params": [
        {
          "prefix": "",
          "name": "opts",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "lookup_path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return True if the given lookup path spawns duplicates.\n    \"\"\""
    },
    {
      "name": "prepare_lookup_value",
      "params": [
        {
          "prefix": "",
          "name": "key",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a lookup value prepared to be used in queryset filtering.\n    \"\"\""
    },
    {
      "name": "quote",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Ensure that primary key values do not confuse the admin URLs by escaping\n    any '/', '_' and ':' and similarly problematic characters.\n    Similar to urllib.parse.quote(), except that the quoting is slightly\n    different so that it doesn't get automatically unquoted by the web browser.\n    \"\"\""
    },
    {
      "name": "unquote",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Undo the effects of quote().\"\"\""
    },
    {
      "name": "flatten",
      "params": [
        {
          "prefix": "",
          "name": "fields",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a list which is a single level of flattening of the original list.\n    \"\"\""
    },
    {
      "name": "flatten_fieldsets",
      "params": [
        {
          "prefix": "",
          "name": "fieldsets",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return a list of field names from an admin fieldsets structure.\"\"\""
    },
    {
      "name": "get_deleted_objects",
      "params": [
        {
          "prefix": "",
          "name": "objs",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "request",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "admin_site",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Find all objects related to ``objs`` that should also be deleted. ``objs``\n    must be a homogeneous iterable of objects (e.g. a QuerySet).\n\n    Return a nested list of strings suitable for display in the\n    template with the ``unordered_list`` filter.\n    \"\"\""
    },
    {
      "name": "model_format_dict",
      "params": [
        {
          "prefix": "",
          "name": "obj",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',\n    typically for use with string formatting.\n\n    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.\n    \"\"\""
    },
    {
      "name": "model_ngettext",
      "params": [
        {
          "prefix": "",
          "name": "obj",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "n",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return the appropriate `verbose_name` or `verbose_name_plural` value for\n    `obj` depending on the count `n`.\n\n    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.\n    If `obj` is a `QuerySet` instance, `n` is optional and the length of the\n    `QuerySet` is used.\n    \"\"\""
    },
    {
      "name": "lookup_field",
      "params": [
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "obj",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model_admin",
          "annotation": null
        }
      ]
    },
    {
      "name": "label_for_field",
      "params": [
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model_admin",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "return_attr",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "form",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a sensible label for a field name. The name can be a callable,\n    property (but not created with @property decorator), or the name of an\n    object's attribute, as well as a model field. If return_attr is True, also\n    return the resolved attribute (which could be a callable). This will be\n    None if (and only if) the name refers to a field.\n    \"\"\""
    },
    {
      "name": "help_text_for_field",
      "params": [
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        }
      ]
    },
    {
      "name": "display_for_field",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "empty_value_display",
          "annotation": null
        }
      ]
    },
    {
      "name": "display_for_value",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "empty_value_display",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "boolean",
          "annotation": null
        }
      ]
    },
    {
      "name": "get_model_from_relation",
      "params": [
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        }
      ]
    },
    {
      "name": "reverse_field_path",
      "params": [
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\" Create a reversed field path.\n\n    E.g. Given (Order, \"user__groups\"),\n    return (Group, \"user__order\").\n\n    Final field must be a related model, not a data field.\n    \"\"\""
    },
    {
      "name": "get_fields_from_path",
      "params": [
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\" Return list of Fields given path relative to model.\n\n    e.g. (ModelX, \"user__groups__name\") -> [\n        <django.db.models.fields.related.ForeignKey object at 0x...>,\n        <django.db.models.fields.related.ManyToManyField object at 0x...>,\n        <django.db.models.fields.CharField object at 0x...>,\n    ]\n    \"\"\""
    },
    {
      "name": "construct_change_message",
      "params": [
        {
          "prefix": "",
          "name": "form",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "formsets",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "add",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Construct a JSON structure describing changes from a changed object.\n    Translations are deactivated so that strings are stored untranslated.\n    Translation happens later on LogEntry access.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "FieldIsAForeignKeyColumnName",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"A field is a foreign key attname, i.e. <FK>_id.\"\"\""
    },
    {
      "name": "NestedObjects",
      "methods": [
        {
          "name": "add_edge",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "source",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "target",
              "annotation": null
            }
          ]
        },
        {
          "name": "collect",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "objs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "source",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "source_attr",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "related_objects",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related_model",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related_fields",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "objs",
              "annotation": null
            }
          ]
        },
        {
          "name": "nested",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format_callback",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the graph as a nested list.\n        \"\"\""
        },
        {
          "name": "can_fast_delete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        We always want to load the objects into memory so that we can display\n        them to the user in confirm page.\n        \"\"\""
        }
      ],
      "classes": []
    },
    {
      "name": "NotRelationField",
      "methods": [],
      "classes": []
    }
  ]
}