{
  "functions": [],
  "classes": [
    {
      "name": "BaseUserManager",
      "methods": [
        {
          "name": "normalize_email",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "email",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ],
          "docstring": "\"\"\"\n        Normalize the email address by lowercasing the domain part of it.\n        \"\"\""
        },
        {
          "name": "make_random_password",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "length",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allowed_chars",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Generate a random password with the given length and given\n        allowed_chars. The default value of allowed_chars does not have \"I\" or\n        \"O\" or letters and digits that look similar -- just to avoid confusion.\n        \"\"\""
        },
        {
          "name": "get_by_natural_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "username",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "AbstractBaseUser",
      "methods": [
        {
          "name": "save",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_username",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the username for this User.\"\"\""
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "natural_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "is_anonymous",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Always return False. This is a way of comparing User objects to\n        anonymous users.\n        \"\"\""
        },
        {
          "name": "is_authenticated",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Always return True. This is a way to tell if the user has been\n        authenticated in templates.\n        \"\"\""
        },
        {
          "name": "set_password",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "raw_password",
              "annotation": null
            }
          ]
        },
        {
          "name": "check_password",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "raw_password",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a boolean of whether the raw_password was correct. Handles\n        hashing formats behind the scenes.\n        \"\"\""
        },
        {
          "name": "set_unusable_password",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "has_usable_password",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return False if set_unusable_password() has been called for this user.\n        \"\"\""
        },
        {
          "name": "get_session_auth_hash",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return an HMAC of the password field.\n        \"\"\""
        },
        {
          "name": "get_email_field_name",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "normalize_username",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "username",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Meta",
          "methods": [],
          "classes": []
        }
      ]
    }
  ],
  "docstring": "\"\"\"\nThis module allows importing AbstractBaseUser even when django.contrib.auth is\nnot in INSTALLED_APPS.\n\"\"\""
}