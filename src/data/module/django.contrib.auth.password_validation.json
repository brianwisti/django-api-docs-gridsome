{
  "functions": [
    {
      "name": "get_default_password_validators",
      "params": [],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=None)"
        }
      ]
    },
    {
      "name": "get_password_validators",
      "params": [
        {
          "prefix": "",
          "name": "validator_config",
          "annotation": null
        }
      ]
    },
    {
      "name": "validate_password",
      "params": [
        {
          "prefix": "",
          "name": "password",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "user",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "password_validators",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Validate whether the password meets all validator requirements.\n\n    If the password is valid, return ``None``.\n    If the password is invalid, raise ValidationError with all error messages.\n    \"\"\""
    },
    {
      "name": "password_changed",
      "params": [
        {
          "prefix": "",
          "name": "password",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "user",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "password_validators",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Inform all validators that have implemented a password_changed() method\n    that the password has been changed.\n    \"\"\""
    },
    {
      "name": "password_validators_help_texts",
      "params": [
        {
          "prefix": "",
          "name": "password_validators",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a list of all help texts of all configured validators.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "MinimumLengthValidator",
      "methods": [
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "password",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "user",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_help_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Validate whether the password is of a minimum length.\n    \"\"\""
    },
    {
      "name": "UserAttributeSimilarityValidator",
      "methods": [
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "password",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "user",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_help_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Validate whether the password is sufficiently different from the user's\n    attributes.\n\n    If no specific attributes are provided, look at a sensible list of\n    defaults. Attributes that don't exist are ignored. Comparison is made to\n    not only the full attribute value, but also its components, so that, for\n    example, a password is validated against either part of an email address,\n    as well as the full address.\n    \"\"\""
    },
    {
      "name": "CommonPasswordValidator",
      "methods": [
        {
          "name": "DEFAULT_PASSWORD_LIST_PATH",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "password",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "user",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_help_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Validate whether the password is a common password.\n\n    The password is rejected if it occurs in a provided list of passwords,\n    which may be gzipped. The list Django ships with contains 20000 common\n    passwords (lowercased and deduplicated), created by Royce Williams:\n    https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7\n    The password list must be lowercased to match the comparison in validate().\n    \"\"\""
    },
    {
      "name": "NumericPasswordValidator",
      "methods": [
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "password",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "user",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_help_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Validate whether the password is alphanumeric.\n    \"\"\""
    }
  ]
}