{
  "functions": [],
  "classes": [
    {
      "name": "RasterBandTransform",
      "methods": [
        {
          "name": "as_sql",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "GISLookup",
      "methods": [
        {
          "name": "process_rhs_params",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "process_band_indices",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "only_lhs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Extract the lhs band index from the band transform class and the rhs\n        band index from the input tuple.\n        \"\"\""
        },
        {
          "name": "get_db_prep_lookup",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "process_rhs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_rhs_op",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rhs",
              "annotation": null
            }
          ]
        },
        {
          "name": "as_sql",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "OverlapsLeftLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The overlaps_left operator returns true if A's bounding box overlaps or is to the\n    left of B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "# ------------------\n# Geometry operators\n# ------------------\n\n@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "OverlapsRightLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'overlaps_right' operator returns true if A's bounding box overlaps or is to the\n    right of B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "OverlapsBelowLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'overlaps_below' operator returns true if A's bounding box overlaps or is below\n    B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "OverlapsAboveLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'overlaps_above' operator returns true if A's bounding box overlaps or is above\n    B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "LeftLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'left' operator returns true if A's bounding box is strictly to the left\n    of B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "RightLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'right' operator returns true if A's bounding box is strictly to the right\n    of B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "StrictlyBelowLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'strictly_below' operator returns true if A's bounding box is strictly below B's\n    bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "StrictlyAboveLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'strictly_above' operator returns true if A's bounding box is strictly above B's\n    bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "SameAsLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The \"~=\" operator is the \"same as\" operator. It tests actual geometric\n    equality of two features. So if A and B are the same feature,\n    vertex-by-vertex, the operator returns true.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "BBContainsLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'bbcontains' operator returns true if A's bounding box completely contains\n    by B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "BBOverlapsLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'bboverlaps' operator returns true if A's bounding box overlaps B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "ContainedLookup",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    The 'contained' operator returns true if A's bounding box is completely contained\n    by B's bounding box.\n    \"\"\"",
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "ContainsLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "# ------------------\n# Geometry functions\n# ------------------\n\n@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "ContainsProperlyLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "CoveredByLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "CoversLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "CrossesLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DisjointLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "EqualsLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "IntersectsLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "OverlapsLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "RelateLookup",
      "methods": [
        {
          "name": "process_rhs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "TouchesLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "WithinLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DistanceLookupBase",
      "methods": [
        {
          "name": "process_rhs_params",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "process_distance",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DWithinLookup",
      "methods": [
        {
          "name": "process_distance",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "process_rhs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DistanceLookupFromFunction",
      "methods": [
        {
          "name": "as_sql",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DistanceGTLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DistanceGTELookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DistanceLTLookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    },
    {
      "name": "DistanceLTELookup",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@BaseSpatialField.register_lookup"
        }
      ]
    }
  ]
}