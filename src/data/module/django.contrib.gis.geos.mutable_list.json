{
  "functions": [],
  "classes": [
    {
      "name": "ListMixin",
      "methods": [
        {
          "name": "count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "val",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list count method\""
        },
        {
          "name": "index",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "val",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list index method\""
        },
        {
          "name": "append",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "val",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list append method\""
        },
        {
          "name": "extend",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "vals",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list extend method\""
        },
        {
          "name": "insert",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "index",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "val",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list insert method\""
        },
        {
          "name": "pop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "index",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list pop method\""
        },
        {
          "name": "remove",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "val",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list remove method\""
        },
        {
          "name": "reverse",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list reverse method\""
        },
        {
          "name": "sort",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "reverse",
              "annotation": null
            }
          ],
          "docstring": "\"Standard list sort method\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A base class which provides complete list interface.\n    Derived classes must call ListMixin's __init__() function\n    and implement the following:\n\n    function _get_single_external(self, i):\n        Return single item with index i for general use.\n        The index i will always satisfy 0 <= i < len(self).\n\n    function _get_single_internal(self, i):\n        Same as above, but for use within the class [Optional]\n        Note that if _get_single_internal and _get_single_internal return\n        different types of objects, _set_list must distinguish\n        between the two and handle each appropriately.\n\n    function _set_list(self, length, items):\n        Recreate the entire object.\n\n        NOTE: items may be a generator which calls _get_single_internal.\n        Therefore, it is necessary to cache the values in a temporary:\n            temp = list(items)\n        before clobbering the original storage.\n\n    function _set_single(self, i, value):\n        Set the single item at index i to value [Optional]\n        If left undefined, all mutations will result in rebuilding\n        the object using _set_list.\n\n    function __len__(self):\n        Return the length\n\n    int _minlength:\n        The minimum legal length [Optional]\n\n    int _maxlength:\n        The maximum legal length [Optional]\n\n    type or tuple _allowed:\n        A type or tuple of allowed item types [Optional]\n    \"\"\"",
      "decorators": [
        {
          "name": "@total_ordering"
        }
      ]
    }
  ],
  "doc": "\"\"\"\nThis module contains a base type which provides list-style mutations\nwithout specific data storage methods.\n\nSee also http://static.aryehleib.com/oldsite/MutableLists.html\n\nAuthor: Aryeh Leib Taurog.\n\"\"\""
}