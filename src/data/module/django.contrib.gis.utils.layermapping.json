{
  "functions": [],
  "classes": [
    {
      "name": "LayerMapError",
      "methods": [],
      "classes": []
    },
    {
      "name": "InvalidString",
      "methods": [],
      "classes": []
    },
    {
      "name": "InvalidDecimal",
      "methods": [],
      "classes": []
    },
    {
      "name": "InvalidInteger",
      "methods": [],
      "classes": []
    },
    {
      "name": "MissingForeignKey",
      "methods": [],
      "classes": []
    },
    {
      "name": "LayerMapping",
      "methods": [
        {
          "name": "check_fid_range",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fid_range",
              "annotation": null
            }
          ],
          "docstring": "\"Check the `fid_range` keyword.\""
        },
        {
          "name": "check_layer",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check the Layer metadata and ensure that it's compatible with the\n        mapping information and model. Unlike previous revisions, there is no\n        need to increment through each feature in the Layer.\n        \"\"\""
        },
        {
          "name": "check_srs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "source_srs",
              "annotation": null
            }
          ],
          "docstring": "\"Check the compatibility of the given spatial reference object.\""
        },
        {
          "name": "check_unique",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "unique",
              "annotation": null
            }
          ],
          "docstring": "\"Check the `unique` keyword parameter -- may be a sequence or string.\""
        },
        {
          "name": "feature_kwargs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "feat",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given an OGR Feature, return a dictionary of keyword arguments for\n        constructing the mapped model.\n        \"\"\""
        },
        {
          "name": "unique_kwargs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given the feature keyword arguments (from `feature_kwargs`), construct\n        and return the uniqueness keyword arguments -- a subset of the feature\n        kwargs.\n        \"\"\""
        },
        {
          "name": "verify_ogr_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "ogr_field",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model_field",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Verify if the OGR Field contents are acceptable to the model field. If\n        they are, return the verified value, otherwise raise an exception.\n        \"\"\""
        },
        {
          "name": "verify_fk",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "feat",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rel_model",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rel_mapping",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given an OGR Feature, the related model and its dictionary mapping,\n        retrieve the related model for the ForeignKey mapping.\n        \"\"\""
        },
        {
          "name": "verify_geom",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "geom",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model_field",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Verify the geometry -- construct and return a GeometryCollection\n        if necessary (for example if the model field is MultiPolygonField while\n        the mapped shapefile only contains Polygons).\n        \"\"\""
        },
        {
          "name": "coord_transform",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"Return the coordinate transformation object.\""
        },
        {
          "name": "geometry_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"Return the GeometryField instance associated with the geographic column.\""
        },
        {
          "name": "make_multi",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "geom_type",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model_field",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given the OGRGeomType for a geometry and its associated GeometryField,\n        determine whether the geometry should be turned into a GeometryCollection.\n        \"\"\""
        },
        {
          "name": "save",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "verbose",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fid_range",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "step",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "progress",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "silent",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "stream",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "strict",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Save the contents from the OGR DataSource Layer into the database\n        according to the mapping dictionary given at initialization.\n\n        Keyword Parameters:\n         verbose:\n           If set, information will be printed subsequent to each model save\n           executed on the database.\n\n         fid_range:\n           May be set with a slice or tuple of (begin, end) feature ID's to map\n           from the data source.  In other words, this keyword enables the user\n           to selectively import a subset range of features in the geographic\n           data source.\n\n         step:\n           If set with an integer, transactions will occur at every step\n           interval. For example, if step=1000, a commit would occur after\n           the 1,000th feature, the 2,000th feature etc.\n\n         progress:\n           When this keyword is set, status information will be printed giving\n           the number of features processed and successfully saved.  By default,\n           progress information will pe printed every 1000 features processed,\n           however, this default may be overridden by setting this keyword with an\n           integer for the desired interval.\n\n         stream:\n           Status information will be written to this file handle.  Defaults to\n           using `sys.stdout`, but any object with a `write` method is supported.\n\n         silent:\n           By default, non-fatal error notifications are printed to stdout, but\n           this keyword may be set to disable these notifications.\n\n         strict:\n           Execution of the model mapping will cease upon the first error\n           encountered.  The default behavior is to attempt to continue.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"A class that maps OGR Layers to GeoDjango Models.\""
    }
  ],
  "docstring": "\"\"\"\n The LayerMapping class provides a way to map the contents of OGR\n vector files (e.g. SHP files) to Geographic-enabled Django models.\n\n For more information, please consult the GeoDjango documentation:\n   https://docs.djangoproject.com/en/dev/ref/contrib/gis/layermapping/\n\"\"\""
}