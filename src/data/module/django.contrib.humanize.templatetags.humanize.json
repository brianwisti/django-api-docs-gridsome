{
  "functions": [
    {
      "name": "ordinal",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Convert an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n    3 is '3rd', etc. Works for any integer.\n    \"\"\""
    },
    {
      "name": "intcomma",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "use_l10n",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Convert an integer to a string containing commas every three digits.\n    For example, 3000 becomes '3,000' and 45000 becomes '45,000'.\n    \"\"\""
    },
    {
      "name": "intword",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Convert a large integer to a friendly text representation. Works best\n    for numbers over 1 million. For example, 1000000 becomes '1.0 million',\n    1200000 becomes '1.2 million' and '1200000000' becomes '1.2 billion'.\n    \"\"\""
    },
    {
      "name": "apnumber",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    For numbers 1-9, return the number spelled out. Otherwise, return the\n    number. This follows Associated Press style.\n    \"\"\""
    },
    {
      "name": "naturalday",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "# Perform the comparison in the default time zone when USE_TZ = True\n# (unless a specific time zone has been applied with the |timezone filter).\n@register.filter(expects_localtime=True)"
        }
      ],
      "docstring": "\"\"\"\n    For date values that are tomorrow, today or yesterday compared to\n    present day return representing string. Otherwise, return a string\n    formatted according to settings.DATE_FORMAT.\n    \"\"\""
    },
    {
      "name": "naturaltime",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "# This filter doesn't require expects_localtime=True because it deals properly\n# with both naive and aware datetimes. Therefore avoid the cost of conversion.\n@register.filter"
        }
      ],
      "docstring": "\"\"\"\n    For date and time values show how many seconds, minutes, or hours ago\n    compared to current timestamp return representing string.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "NaturalTimeFormatter",
      "methods": [
        {
          "name": "string_for",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        }
      ],
      "classes": []
    }
  ]
}