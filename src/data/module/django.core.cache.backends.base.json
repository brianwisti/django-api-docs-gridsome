{
  "functions": [
    {
      "name": "default_key_func",
      "params": [
        {
          "prefix": "",
          "name": "key",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "key_prefix",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "version",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Default function to generate keys.\n\n    Construct the key used by all other methods. By default, prepend\n    the `key_prefix`. KEY_FUNCTION can be used to specify an alternate\n    function with custom key making behavior.\n    \"\"\""
    },
    {
      "name": "get_key_func",
      "params": [
        {
          "prefix": "",
          "name": "key_func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Function to decide which key function to use.\n\n    Default to ``default_key_func``.\n    \"\"\""
    },
    {
      "name": "memcache_key_warnings",
      "params": [
        {
          "prefix": "",
          "name": "key",
          "annotation": null
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "InvalidCacheBackendError",
      "methods": [],
      "classes": []
    },
    {
      "name": "CacheKeyWarning",
      "methods": [],
      "classes": []
    },
    {
      "name": "InvalidCacheKey",
      "methods": [],
      "classes": []
    },
    {
      "name": "BaseCache",
      "methods": [
        {
          "name": "get_backend_timeout",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the timeout value usable by this backend based upon the provided\n        timeout.\n        \"\"\""
        },
        {
          "name": "make_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Construct the key used by all other methods. By default, use the\n        key_func to generate a key (which, by default, prepends the\n        `key_prefix' and 'version'). A different key function can be provided\n        at the time of cache construction; alternatively, you can subclass the\n        cache backend to provide custom key making behavior.\n        \"\"\""
        },
        {
          "name": "validate_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Warn about keys that would not be portable to the memcached\n        backend. This encourages (but does not force) writing backend-portable\n        cache code.\n        \"\"\""
        },
        {
          "name": "make_and_validate_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Helper to make and validate keys.\"\"\""
        },
        {
          "name": "add",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set a value in the cache if the key does not already exist. If\n        timeout is given, use that timeout for the key; otherwise use the\n        default cache timeout.\n\n        Return True if the value was stored, False otherwise.\n        \"\"\""
        },
        {
          "name": "aadd",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Fetch a given key from the cache. If the key does not exist, return\n        default, which itself defaults to None.\n        \"\"\""
        },
        {
          "name": "aget",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "set",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set a value in the cache. If timeout is given, use that timeout for the\n        key; otherwise use the default cache timeout.\n        \"\"\""
        },
        {
          "name": "aset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "touch",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Update the key's expiry time using timeout. Return True if successful\n        or False if the key does not exist.\n        \"\"\""
        },
        {
          "name": "atouch",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "delete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Delete a key from the cache and return whether it succeeded, failing\n        silently.\n        \"\"\""
        },
        {
          "name": "adelete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keys",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Fetch a bunch of keys from the cache. For certain backends (memcached,\n        pgsql) this can be *much* faster when fetching multiple values.\n\n        Return a dict mapping each key in keys to its value. If the given\n        key is missing, it will be missing from the response dict.\n        \"\"\""
        },
        {
          "name": "aget_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keys",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"See get_many().\"\"\""
        },
        {
          "name": "get_or_set",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Fetch a given key from the cache. If the key does not exist,\n        add the key and set it to the default value. The default value can\n        also be any callable. If timeout is given, use that timeout for the\n        key; otherwise use the default cache timeout.\n\n        Return the value of the key stored or retrieved.\n        \"\"\""
        },
        {
          "name": "aget_or_set",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"See get_or_set().\"\"\""
        },
        {
          "name": "has_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return True if the key is in the cache and has not expired.\n        \"\"\""
        },
        {
          "name": "ahas_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "incr",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add delta to value in the cache. If the key does not exist, raise a\n        ValueError exception.\n        \"\"\""
        },
        {
          "name": "aincr",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"See incr().\"\"\""
        },
        {
          "name": "decr",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Subtract delta from value in the cache. If the key does not exist, raise\n        a ValueError exception.\n        \"\"\""
        },
        {
          "name": "adecr",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set a bunch of values in the cache at once from a dict of key/value\n        pairs.  For certain backends (memcached), this is much more efficient\n        than calling set() multiple times.\n\n        If timeout is given, use that timeout for the key; otherwise use the\n        default cache timeout.\n\n        On backends that support it, return a list of keys that failed\n        insertion, or an empty list if all keys were inserted successfully.\n        \"\"\""
        },
        {
          "name": "aset_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "timeout",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "delete_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keys",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Delete a bunch of values in the cache at once. For certain backends\n        (memcached), this is much more efficient than calling delete() multiple\n        times.\n        \"\"\""
        },
        {
          "name": "adelete_many",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keys",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "clear",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Remove *all* values from the cache at once.\"\"\""
        },
        {
          "name": "aclear",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "incr_version",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add delta to the cache version for the supplied key. Return the new\n        version.\n        \"\"\""
        },
        {
          "name": "aincr_version",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"See incr_version().\"\"\""
        },
        {
          "name": "decr_version",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Subtract delta from the cache version for the supplied key. Return the\n        new version.\n        \"\"\""
        },
        {
          "name": "adecr_version",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "delta",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "version",
              "annotation": null
            }
          ]
        },
        {
          "name": "close",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Close the cache connection\"\"\""
        },
        {
          "name": "aclose",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    }
  ],
  "doc": "\"Base Cache class.\""
}