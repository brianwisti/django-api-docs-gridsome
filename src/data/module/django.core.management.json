{
  "functions": [
    {
      "name": "find_commands",
      "params": [
        {
          "prefix": "",
          "name": "management_dir",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Given a path to a management directory, return a list of all the command\n    names that are available.\n    \"\"\""
    },
    {
      "name": "load_command_class",
      "params": [
        {
          "prefix": "",
          "name": "app_name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Given a command name and an application name, return the Command\n    class instance. Allow all errors raised by the import process\n    (ImportError, AttributeError) to propagate.\n    \"\"\""
    },
    {
      "name": "get_commands",
      "params": [],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=None)"
        }
      ],
      "docstring": "\"\"\"\n    Return a dictionary mapping command names to their callback applications.\n\n    Look for a management.commands package in django.core, and in each\n    installed application -- if a commands package exists, register all\n    commands in that package.\n\n    Core commands are always included. If a settings module has been\n    specified, also include user-defined commands.\n\n    The dictionary is in the format {command_name: app_name}. Key-value\n    pairs from this dictionary can then be used in calls to\n    load_command_class(app_name, command_name)\n\n    If a specific version of a command must be loaded (e.g., with the\n    startapp command), the instantiated module can be placed in the\n    dictionary in place of the application name.\n\n    The dictionary is cached on the first call and reused on subsequent\n    calls.\n    \"\"\""
    },
    {
      "name": "call_command",
      "params": [
        {
          "prefix": "",
          "name": "command_name",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "options",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Call the given command, with the given options and args/kwargs.\n\n    This is the primary API you should use for calling specific commands.\n\n    `command_name` may be a string or a command object. Using a string is\n    preferred unless the command object is required for further processing or\n    testing.\n\n    Some examples:\n        call_command('migrate')\n        call_command('shell', plain=True)\n        call_command('sqlmigrate', 'myapp')\n\n        from django.core.management.commands import flush\n        cmd = flush.Command()\n        call_command(cmd, verbosity=0, interactive=False)\n        # Do something with cmd ...\n    \"\"\""
    },
    {
      "name": "execute_from_command_line",
      "params": [
        {
          "prefix": "",
          "name": "argv",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Run a ManagementUtility.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "ManagementUtility",
      "methods": [
        {
          "name": "main_help_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "commands_only",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the script's main help text, as a string.\"\"\""
        },
        {
          "name": "fetch_command",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "subcommand",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Try to fetch the given subcommand, printing a message with the\n        appropriate command called from the command line (usually\n        \"django-admin\" or \"manage.py\") if it can't be found.\n        \"\"\""
        },
        {
          "name": "autocomplete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Output completion suggestions for BASH.\n\n        The output of this function is passed to BASH's `COMREPLY` variable and\n        treated as completion suggestions. `COMREPLY` expects a space\n        separated string as the result.\n\n        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used\n        to get information about the cli input. Please refer to the BASH\n        man-page for more information about this variables.\n\n        Subcommand options are saved as pairs. A pair consists of\n        the long option string (e.g. '--exclude') and a boolean\n        value indicating if the option requires arguments. When printing to\n        stdout, an equal sign is appended to options which require arguments.\n\n        Note: If debugging this function, it is recommended to write the debug\n        output in a separate file. Otherwise the debug output will be treated\n        and formatted as potential completion suggestions.\n        \"\"\""
        },
        {
          "name": "execute",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given the command-line arguments, figure out which subcommand is being\n        run, create a parser appropriate to that command, and run it.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Encapsulate the logic of the django-admin and manage.py utilities.\n    \"\"\""
    }
  ]
}