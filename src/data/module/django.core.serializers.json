{
  "functions": [
    {
      "name": "register_serializer",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "serializer_module",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "serializers",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Register a new serializer.\n\n    ``serializer_module`` should be the fully qualified module name\n    for the serializer.\n\n    If ``serializers`` is provided, the registration will be added\n    to the provided dictionary.\n\n    If ``serializers`` is not provided, the registration will be made\n    directly into the global register of serializers. Adding serializers\n    directly is not a thread-safe operation.\n    \"\"\""
    },
    {
      "name": "unregister_serializer",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        }
      ],
      "docstring": "\"Unregister a given serializer. This is not a thread-safe operation.\""
    },
    {
      "name": "get_serializer",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        }
      ]
    },
    {
      "name": "get_serializer_formats",
      "params": []
    },
    {
      "name": "get_public_serializer_formats",
      "params": []
    },
    {
      "name": "get_deserializer",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        }
      ]
    },
    {
      "name": "serialize",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "queryset",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "options",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Serialize a queryset (or any iterator that returns database objects) using\n    a certain serializer.\n    \"\"\""
    },
    {
      "name": "deserialize",
      "params": [
        {
          "prefix": "",
          "name": "format",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "stream_or_string",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "options",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Deserialize a stream or a string. Return an iterator that yields ``(obj,\n    m2m_relation_dict)``, where ``obj`` is an instantiated -- but *unsaved* --\n    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :\n    list_of_related_objects}``.\n    \"\"\""
    },
    {
      "name": "sort_dependencies",
      "params": [
        {
          "prefix": "",
          "name": "app_list",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "allow_cycles",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Sort a list of (app_config, models) pairs into a single list of models.\n\n    The single list of models is sorted so that any model with a natural key\n    is serialized before a normal model, and any model with a natural key\n    dependency has it's dependencies serialized first.\n\n    If allow_cycles is True, return the best-effort ordering that will respect\n    most of dependencies but ignore some of them to break the cycles.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "BadSerializer",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Stub serializer to hold exception raised during registration\n\n    This allows the serializer registration to cache serializers and if there\n    is an error raised in the process of creating a serializer it will be\n    raised and passed along to the caller when the serializer is used.\n    \"\"\""
    }
  ],
  "doc": "\"\"\"\nInterfaces for serializing Django objects.\n\nUsage::\n\n    from django.core import serializers\n    json = serializers.serialize(\"json\", some_queryset)\n    objects = list(serializers.deserialize(\"json\", json))\n\nTo add your own serializers, use the SERIALIZATION_MODULES setting::\n\n    SERIALIZATION_MODULES = {\n        \"csv\": \"path.to.csv.serializer\",\n        \"txt\": \"path.to.txt.serializer\",\n    }\n\n\"\"\""
}