{
  "functions": [
    {
      "name": "validate_integer",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ]
    },
    {
      "name": "validate_ipv4_address",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ]
    },
    {
      "name": "validate_ipv6_address",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ]
    },
    {
      "name": "validate_ipv46_address",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ]
    },
    {
      "name": "ip_address_validators",
      "params": [
        {
          "prefix": "",
          "name": "protocol",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "unpack_ipv4",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Depending on the given parameters, return the appropriate validators for\n    the GenericIPAddressField.\n    \"\"\""
    },
    {
      "name": "int_list_validator",
      "params": [
        {
          "prefix": "",
          "name": "sep",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "message",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "code",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "allow_negative",
          "annotation": null
        }
      ]
    },
    {
      "name": "get_available_image_extensions",
      "params": []
    },
    {
      "name": "validate_image_file_extension",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "RegexValidator",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "URLValidator",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "EmailValidator",
      "methods": [
        {
          "name": "domain_whitelist",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "domain_whitelist",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allowlist",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@domain_whitelist.setter"
            }
          ]
        },
        {
          "name": "validate_domain_part",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "domain_part",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "BaseValidator",
      "methods": [
        {
          "name": "compare",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "a",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "b",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "x",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "MaxValueValidator",
      "methods": [
        {
          "name": "compare",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "a",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "b",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "MinValueValidator",
      "methods": [
        {
          "name": "compare",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "a",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "b",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "MinLengthValidator",
      "methods": [
        {
          "name": "compare",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "a",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "b",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "x",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "MaxLengthValidator",
      "methods": [
        {
          "name": "compare",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "a",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "b",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "x",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "DecimalValidator",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Validate that the input does not exceed the maximum number of digits\n    expected, otherwise raise ValidationError.\n    \"\"\"",
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "FileExtensionValidator",
      "methods": [],
      "classes": [],
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    },
    {
      "name": "ProhibitNullCharactersValidator",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Validate that the string doesn't contain the null character.\"\"\"",
      "decorators": [
        {
          "name": "@deconstructible"
        }
      ]
    }
  ]
}