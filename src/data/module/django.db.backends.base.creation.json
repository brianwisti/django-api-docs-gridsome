{
  "functions": [],
  "classes": [
    {
      "name": "BaseDatabaseCreation",
      "methods": [
        {
          "name": "log",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "msg",
              "annotation": null
            }
          ]
        },
        {
          "name": "create_test_db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "verbosity",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "autoclobber",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "serialize",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keepdb",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Create a test database, prompting the user for confirmation if the\n        database already exists. Return the name of the test database created.\n        \"\"\""
        },
        {
          "name": "set_as_test_mirror",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "primary_settings_dict",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set this database up to be used in testing as a mirror of a primary\n        database whose settings are given.\n        \"\"\""
        },
        {
          "name": "serialize_db_to_string",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Serialize all data in the database into a JSON string.\n        Designed only for test runner usage; will not handle large\n        amounts of data.\n        \"\"\""
        },
        {
          "name": "deserialize_db_from_string",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Reload the database with data from a string generated by\n        the serialize_db_to_string() method.\n        \"\"\""
        },
        {
          "name": "clone_test_db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "suffix",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "verbosity",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "autoclobber",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keepdb",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Clone a test database.\n        \"\"\""
        },
        {
          "name": "get_test_db_clone_settings",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "suffix",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a modified connection settings dict for the n-th clone of a DB.\n        \"\"\""
        },
        {
          "name": "destroy_test_db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "old_database_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "verbosity",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keepdb",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "suffix",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Destroy a test database, prompting the user for confirmation if the\n        database already exists.\n        \"\"\""
        },
        {
          "name": "mark_expected_failures_and_skips",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Mark tests in Django's test suite which are expected failures on this\n        database and test which should be skipped on this database.\n        \"\"\""
        },
        {
          "name": "sql_table_creation_suffix",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        SQL to append to the end of the test table creation statements.\n        \"\"\""
        },
        {
          "name": "test_db_signature",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a tuple with elements of self.connection.settings_dict (a\n        DATABASES setting value) that uniquely identify a database\n        accordingly to the RDBMS particularities.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Encapsulate backend-specific differences pertaining to creation and\n    destruction of the test database.\n    \"\"\""
    }
  ]
}