{
  "functions": [
    {
      "name": "decoder",
      "params": [
        {
          "prefix": "",
          "name": "conv_func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert bytestrings from Python's sqlite3 interface to a regular string.\n    \"\"\""
    },
    {
      "name": "none_guard",
      "params": [
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Decorator that returns None if any of the arguments to the decorated\n    function are None. Many SQL functions return NULL if any of their arguments\n    are NULL. This decorator simplifies the implementation of this for the\n    custom functions registered below.\n    \"\"\""
    },
    {
      "name": "list_aggregate",
      "params": [
        {
          "prefix": "",
          "name": "function",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return an aggregate class that accumulates values in a list and applies\n    the provided function to the data.\n    \"\"\""
    },
    {
      "name": "check_sqlite_version",
      "params": []
    }
  ],
  "classes": [
    {
      "name": "DatabaseWrapper",
      "methods": [
        {
          "name": "get_connection_params",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_new_connection",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "conn_params",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@async_unsafe"
            }
          ]
        },
        {
          "name": "init_connection_state",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "create_cursor",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ]
        },
        {
          "name": "close",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@async_unsafe"
            }
          ]
        },
        {
          "name": "disable_constraint_checking",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "enable_constraint_checking",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "check_constraints",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "table_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check each table name in `table_names` for rows with invalid foreign\n        key references. This method is intended to be used in conjunction with\n        `disable_constraint_checking()` and `enable_constraint_checking()`, to\n        determine if rows with invalid references were entered while constraint\n        checks were off.\n        \"\"\""
        },
        {
          "name": "is_usable",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "is_in_memory_db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "SQLiteCursorWrapper",
      "methods": [
        {
          "name": "execute",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "query",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "params",
              "annotation": null
            }
          ]
        },
        {
          "name": "executemany",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "query",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "param_list",
              "annotation": null
            }
          ]
        },
        {
          "name": "convert_query",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "query",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Django uses \"format\" style placeholders, but pysqlite2 uses \"qmark\" style.\n    This fixes it -- but note that if you want to use a literal \"%s\" in a query,\n    you'll need to use \"%%s\".\n    \"\"\""
    }
  ],
  "doc": "\"\"\"\nSQLite backend for the sqlite3 module in the standard library.\n\"\"\""
}