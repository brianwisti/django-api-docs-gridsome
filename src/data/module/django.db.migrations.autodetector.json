{
  "functions": [],
  "classes": [
    {
      "name": "MigrationAutodetector",
      "methods": [
        {
          "name": "changes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "graph",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "trim_to_apps",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "convert_apps",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Main entry point to produce a list of applicable changes.\n        Take a graph to base names on and an optional set of apps\n        to try and restrict to (restriction is not guaranteed)\n        \"\"\""
        },
        {
          "name": "deep_deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Recursive deconstruction for a field and its arguments.\n        Used for full comparison for rename/alter; sometimes a single-level\n        deconstruction will not compare correctly.\n        \"\"\""
        },
        {
          "name": "only_relation_agnostic_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a definition of the fields that ignores field names and\n        what related fields actually relate to. Used for detecting renames (as\n        the related fields change during renames).\n        \"\"\""
        },
        {
          "name": "check_dependency",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "operation",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "dependency",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return True if the given operation depends on the given dependency,\n        False otherwise.\n        \"\"\""
        },
        {
          "name": "add_operation",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app_label",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "operation",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "dependencies",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "beginning",
              "annotation": null
            }
          ]
        },
        {
          "name": "swappable_first_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "item",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Place potential swappable models first in lists of created models (only\n        real way to solve #22783).\n        \"\"\""
        },
        {
          "name": "generate_renamed_models",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Find any renamed models, generate the operations for them, and remove\n        the old entry from the model lists. Must be run before other\n        model-level generation.\n        \"\"\""
        },
        {
          "name": "generate_created_models",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Find all new models (both managed and unmanaged) and make create\n        operations for them as well as separate operations to create any\n        foreign key or M2M relationships (these are optimized later, if\n        possible).\n\n        Defer any model options that refer to collections of fields that might\n        be deferred (e.g. unique_together, index_together).\n        \"\"\""
        },
        {
          "name": "generate_created_proxies",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Make CreateModel statements for proxy models. Use the same statements\n        as that way there's less code duplication, but for proxy models it's\n        safe to skip all the pointless field stuff and chuck out an operation.\n        \"\"\""
        },
        {
          "name": "generate_deleted_models",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Find all deleted models (managed and unmanaged) and make delete\n        operations for them as well as separate operations to delete any\n        foreign key or M2M relationships (these are optimized later, if\n        possible).\n\n        Also bring forward removal of any model options that refer to\n        collections of fields - the inverse of generate_created_models().\n        \"\"\""
        },
        {
          "name": "generate_deleted_proxies",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Make DeleteModel options for proxy models.\"\"\""
        },
        {
          "name": "generate_renamed_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Work out renamed fields.\"\"\""
        },
        {
          "name": "generate_added_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Make AddField operations.\"\"\""
        },
        {
          "name": "generate_removed_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Make RemoveField operations.\"\"\""
        },
        {
          "name": "generate_altered_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Make AlterField operations, or possibly RemovedField/AddField if alter\n        isn't possible.\n        \"\"\""
        },
        {
          "name": "create_altered_indexes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_added_indexes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_removed_indexes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "create_altered_constraints",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_added_constraints",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_removed_constraints",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_removed_altered_unique_together",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_removed_altered_index_together",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_altered_unique_together",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_altered_index_together",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_altered_db_table",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_altered_options",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Work out if any non-schema-affecting options have changed and make an\n        operation to represent them in state changes (in case Python code in\n        migrations needs them).\n        \"\"\""
        },
        {
          "name": "generate_altered_order_with_respect_to",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "generate_altered_managers",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "arrange_for_graph",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "changes",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "graph",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Take a result from changes() and a MigrationGraph, and fix the names\n        and dependencies of the changes so they extend the graph from the leaf\n        nodes for each app.\n        \"\"\""
        },
        {
          "name": "parse_number",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ],
          "docstring": "\"\"\"\n        Given a migration name, try to extract a number from the beginning of\n        it. If no number is found, return None.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Take a pair of ProjectStates and compare them to see what the first would\n    need doing to make it match the second (the second usually being the\n    project's current state).\n\n    Note that this naturally operates on entire projects at a time,\n    as it's likely that changes interact (for example, you can't\n    add a ForeignKey without having a migration to add the table it\n    depends on first). A user interface may offer single-app usage\n    if it wishes, with the caveat that it may not always be possible.\n    \"\"\""
    }
  ]
}