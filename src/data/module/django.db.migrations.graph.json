{
  "functions": [],
  "classes": [
    {
      "name": "Node",
      "methods": [
        {
          "name": "add_child",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "child",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_parent",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parent",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A single node in the migration graph. Contains direct links to adjacent\n    nodes in either direction.\n    \"\"\"",
      "decorators": [
        {
          "name": "@total_ordering"
        }
      ]
    },
    {
      "name": "DummyNode",
      "methods": [
        {
          "name": "raise_error",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A node that doesn't correspond to a migration file on disk.\n    (A squashed migration that was removed, for example.)\n\n    After the migration graph is processed, all dummy nodes should be removed.\n    If there are any left, a nonexistent dependency error is raised.\n    \"\"\""
    },
    {
      "name": "MigrationGraph",
      "methods": [
        {
          "name": "add_node",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_dummy_node",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "origin",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "error_message",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_dependency",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "child",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parent",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "skip_validation",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        This may create dummy nodes if they don't yet exist. If\n        `skip_validation=True`, validate_consistency() should be called\n        afterward.\n        \"\"\""
        },
        {
          "name": "remove_replaced_nodes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "replacement",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "replaced",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Remove each of the `replaced` nodes (when they exist). Any\n        dependencies that were referencing them are changed to reference the\n        `replacement` node instead.\n        \"\"\""
        },
        {
          "name": "remove_replacement_node",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "replacement",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "replaced",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        The inverse operation to `remove_replaced_nodes`. Almost. Remove the\n        replacement node `replacement` and remap its child nodes to `replaced`\n        - the list of nodes it would have replaced. Don't remap its parent\n        nodes as they are expected to be correct already.\n        \"\"\""
        },
        {
          "name": "validate_consistency",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Ensure there are no dummy nodes remaining in the graph.\"\"\""
        },
        {
          "name": "forwards_plan",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "target",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given a node, return a list of which previous nodes (dependencies) must\n        be applied, ending with the node itself. This is the list you would\n        follow if applying the migrations to a database.\n        \"\"\""
        },
        {
          "name": "backwards_plan",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "target",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given a node, return a list of which dependent nodes (dependencies)\n        must be unapplied, ending with the node itself. This is the list you\n        would follow if removing the migrations from a database.\n        \"\"\""
        },
        {
          "name": "iterative_dfs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "start",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "forwards",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Iterative depth-first search for finding dependencies.\"\"\""
        },
        {
          "name": "root_nodes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return all root nodes - that is, nodes with no dependencies inside\n        their app. These are the starting point for an app.\n        \"\"\""
        },
        {
          "name": "leaf_nodes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return all leaf nodes - that is, nodes with no dependents in their app.\n        These are the \"most current\" version of an app's schema.\n        Having more than one per app is technically an error, but one that\n        gets handled further up, in the interactive command - it's usually the\n        result of a VCS merge and needs some user input.\n        \"\"\""
        },
        {
          "name": "ensure_not_cyclic",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "make_state",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "nodes",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "at_end",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "real_apps",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given a migration node or nodes, return a complete ProjectState for it.\n        If at_end is False, return the state before the migration has run.\n        If nodes is not provided, return the overall most current project state.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Represent the digraph of all migrations in a project.\n\n    Each migration is a node, and each dependency is an edge. There are\n    no implicit dependencies between numbered migrations - the numbering is\n    merely a convention to aid file listing. Every new numbered migration\n    has a declared dependency to the previous number, meaning that VCS\n    branch merges can be detected and resolved.\n\n    Migrations files can be marked as replacing another set of migrations -\n    this is to support the \"squash\" feature. The graph handler isn't responsible\n    for these; instead, the code to load them in here should examine the\n    migration files and if the replaced migrations are all either unapplied\n    or not present, it should ignore the replaced ones, load in just the\n    replacing migration, and repoint any dependencies that pointed to the\n    replaced migrations to point to the replacing one.\n\n    A node should be a tuple: (app_path, migration_name). The tree special-cases\n    things within an app - namely, root nodes and leaf nodes ignore dependencies\n    to other apps.\n    \"\"\""
    }
  ]
}