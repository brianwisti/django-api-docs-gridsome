{
  "functions": [],
  "classes": [
    {
      "name": "MigrationLoader",
      "methods": [
        {
          "name": "migrations_module",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app_label",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ],
          "docstring": "\"\"\"\n        Return the path to the migrations module for the specified app_label\n        and a boolean indicating if the module is specified in\n        settings.MIGRATION_MODULE.\n        \"\"\""
        },
        {
          "name": "load_disk",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Load the migrations from all INSTALLED_APPS from disk.\"\"\""
        },
        {
          "name": "get_migration",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app_label",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name_prefix",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the named migration or raise NodeNotFoundError.\"\"\""
        },
        {
          "name": "get_migration_by_prefix",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app_label",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name_prefix",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the migration(s) which match the given app label and name_prefix.\n        \"\"\""
        },
        {
          "name": "check_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "current_app",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_internal_dependencies",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Internal dependencies need to be added first to ensure `__first__`\n        dependencies find the correct root node.\n        \"\"\""
        },
        {
          "name": "add_external_dependencies",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "migration",
              "annotation": null
            }
          ]
        },
        {
          "name": "build_graph",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Build a migration dependency graph using both the disk and database.\n        You'll need to rebuild the graph if you apply migrations. This isn't\n        usually a problem as generally migration stuff runs in a one-shot process.\n        \"\"\""
        },
        {
          "name": "check_consistent_history",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Raise InconsistentMigrationHistory if any applied migrations have\n        unapplied dependencies.\n        \"\"\""
        },
        {
          "name": "detect_conflicts",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Look through the loaded graph and detect any conflicts - apps\n        with more than one leaf migration. Return a dict of the app labels\n        that conflict with the migration names that conflict.\n        \"\"\""
        },
        {
          "name": "project_state",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "nodes",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "at_end",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a ProjectState object representing the most recent state\n        that the loaded migrations represent.\n\n        See graph.make_state() for the meaning of \"nodes\" and \"at_end\".\n        \"\"\""
        },
        {
          "name": "collect_sql",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "plan",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Take a migration plan and return a list of collected SQL statements\n        that represent the best-efforts version of that plan.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Load migration files from disk and their status from the database.\n\n    Migration files are expected to live in the \"migrations\" directory of\n    an app. Their names are entirely unimportant from a code perspective,\n    but will probably follow the 1234_name.py convention.\n\n    On initialization, this class will scan those directories, and open and\n    read the Python files, looking for a class called Migration, which should\n    inherit from django.db.migrations.Migration. See\n    django.db.migrations.migration for what that looks like.\n\n    Some migrations will be marked as \"replacing\" another set of migrations.\n    These are loaded into a separate set of migrations away from the main ones.\n    If all the migrations they replace are either unapplied or missing from\n    disk, then they are injected into the main set, replacing the named migrations.\n    Any dependency pointers to the replaced migrations are re-pointed to the\n    new migration.\n\n    This does mean that this class MUST also talk to the database as well as\n    to disk, but this is probably fine. We're already not just operating\n    in memory.\n    \"\"\""
    }
  ]
}