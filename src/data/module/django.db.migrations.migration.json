{
  "functions": [
    {
      "name": "swappable_dependency",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Turn a setting value into a dependency.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "Migration",
      "methods": [
        {
          "name": "mutate_state",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "project_state",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "preserve",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Take a ProjectState and return a new one with the migration's\n        operations applied to it. Preserve the original object state by\n        default and return a mutated state from a copy.\n        \"\"\""
        },
        {
          "name": "apply",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "project_state",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "schema_editor",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "collect_sql",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Take a project_state representing all migrations prior to this one\n        and a schema_editor for a live database and apply the migration\n        in a forwards order.\n\n        Return the resulting project state for efficient reuse by following\n        Migrations.\n        \"\"\""
        },
        {
          "name": "unapply",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "project_state",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "schema_editor",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "collect_sql",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Take a project_state representing all migrations prior to this one\n        and a schema_editor for a live database and apply the migration\n        in a reverse order.\n\n        The backwards migration process consists of two phases:\n\n        1. The intermediate states from right before the first until right\n           after the last operation inside this migration are preserved.\n        2. The operations are applied in reverse order using the states\n           recorded in step 1.\n        \"\"\""
        },
        {
          "name": "suggest_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Suggest a name for the operations this migration might represent. Names\n        are not guaranteed to be unique, but put some effort into the fallback\n        name to avoid VCS conflicts if possible.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    The base class for all migrations.\n\n    Migration files will import this from django.db.migrations.Migration\n    and subclass it as a class called Migration. It will have one or more\n    of the following attributes:\n\n     - operations: A list of Operation instances, probably from django.db.migrations.operations\n     - dependencies: A list of tuples of (app_path, migration_name)\n     - run_before: A list of tuples of (app_path, migration_name)\n     - replaces: A list of migration_names\n\n    Note that all migrations come out of migrations and into the Loader or\n    Graph as instances, having been initialized with their app label and name.\n    \"\"\""
    },
    {
      "name": "SwappableTuple",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Subclass of tuple so Django can tell this was originally a swappable\n    dependency when it reads the migration file.\n    \"\"\""
    }
  ]
}