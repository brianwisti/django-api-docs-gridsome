{
  "functions": [],
  "classes": [
    {
      "name": "MigrationRecorder",
      "methods": [
        {
          "name": "Migration",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classproperty"
            }
          ],
          "docstring": "\"\"\"\n        Lazy load to avoid AppRegistryNotReady if installed apps import\n        MigrationRecorder.\n        \"\"\""
        },
        {
          "name": "migration_qs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "has_table",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if the django_migrations table exists.\"\"\""
        },
        {
          "name": "ensure_schema",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Ensure the table exists and has the correct schema.\"\"\""
        },
        {
          "name": "applied_migrations",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a dict mapping (app_name, migration_name) to Migration instances\n        for all applied migrations.\n        \"\"\""
        },
        {
          "name": "record_applied",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Record that a migration was applied.\"\"\""
        },
        {
          "name": "record_unapplied",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Record that a migration was unapplied.\"\"\""
        },
        {
          "name": "flush",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Delete all migration records. Useful for testing migrations.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Deal with storing migration records in the database.\n\n    Because this table is actually itself used for dealing with model\n    creation, it's the one thing we can't do normally via migrations.\n    We manually handle table creation/schema updating (using schema backend)\n    and then have a floating model to do queries with.\n\n    If a migration is unapplied its row is removed from the table. Having\n    a row in the table always means a migration is applied.\n    \"\"\""
    }
  ]
}