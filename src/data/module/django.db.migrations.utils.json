{
  "functions": [
    {
      "name": "get_migration_name_timestamp",
      "params": []
    },
    {
      "name": "resolve_relation",
      "params": [
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "app_label",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model_name",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\""
    },
    {
      "name": "field_references",
      "params": [
        {
          "prefix": "",
          "name": "model_tuple",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "reference_model_tuple",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "reference_field_name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "reference_field",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return either False or a FieldReference if `field` references provided\n    context.\n\n    False positives can be returned if `reference_field_name` is provided\n    without `reference_field` because of the introspection limitation it\n    incurs. This should not be an issue when this function is used to determine\n    whether or not an optimization can take place.\n    \"\"\""
    },
    {
      "name": "get_references",
      "params": [
        {
          "prefix": "",
          "name": "state",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model_tuple",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "field_tuple",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Generator of (model_state, name, field, reference) referencing\n    provided context.\n\n    If field_tuple is provided only references to this particular field of\n    model_tuple will be generated.\n    \"\"\""
    },
    {
      "name": "field_is_referenced",
      "params": [
        {
          "prefix": "",
          "name": "state",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model_tuple",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "field_tuple",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return whether `field_tuple` is referenced by any state models.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "RegexObject",
      "methods": [],
      "classes": []
    }
  ]
}