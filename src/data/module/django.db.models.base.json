{
  "functions": [
    {
      "name": "subclass_exception",
      "params": [
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "bases",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "module",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "attached_to",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Create exception subclass. Used by ModelBase below.\n\n    The exception is created in a way that allows it to be pickled, assuming\n    that the returned exception class will be added as an attribute to the\n    'attached_to' class.\n    \"\"\""
    },
    {
      "name": "method_set_order",
      "params": [
        {
          "prefix": "",
          "name": "self",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "ordered_obj",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "id_list",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "using",
          "annotation": null
        }
      ]
    },
    {
      "name": "method_get_order",
      "params": [
        {
          "prefix": "",
          "name": "self",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "ordered_obj",
          "annotation": null
        }
      ]
    },
    {
      "name": "make_foreign_order_accessors",
      "params": [
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "related_model",
          "annotation": null
        }
      ]
    },
    {
      "name": "model_unpickle",
      "params": [
        {
          "prefix": "",
          "name": "model_id",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Used to unpickle Model subclasses with deferred fields.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "Deferred",
      "methods": [],
      "classes": []
    },
    {
      "name": "ModelBase",
      "methods": [
        {
          "name": "add_to_class",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Metaclass for all models.\"\"\""
    },
    {
      "name": "ModelStateFieldsCacheDescriptor",
      "methods": [],
      "classes": []
    },
    {
      "name": "ModelState",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Store model instance state.\"\"\""
    },
    {
      "name": "Model",
      "methods": [
        {
          "name": "from_db",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "db",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_names",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "get_deferred_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a set containing names of deferred fields for this instance.\n        \"\"\""
        },
        {
          "name": "refresh_from_db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Reload field values from the database.\n\n        By default, the reloading happens from the database this instance was\n        loaded from, or by the read router if this instance wasn't loaded from\n        any database. The using parameter will override the default.\n\n        Fields can be used to specify which fields to reload. The fields\n        should be an iterable of field attnames. If fields is None, then\n        all non-deferred fields are reloaded.\n\n        When accessing deferred fields of an instance, the deferred loading\n        of the field will call this method.\n        \"\"\""
        },
        {
          "name": "serializable_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the value of the field name for this instance. If the field is\n        a foreign key, return the id value instead of the object. If there's\n        no Field object with this name on the model, return the model\n        attribute's value.\n\n        Used to serialize a field's value (in the serializer, or form output,\n        for example). Normally, you would just access the attribute directly\n        and not use this method.\n        \"\"\""
        },
        {
          "name": "save",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "force_insert",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "force_update",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "update_fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Save the current instance. Override this in a subclass if you want to\n        control the saving process.\n\n        The 'force_insert' and 'force_update' parameters can be used to insist\n        that the \"save\" must be an SQL insert or update (or equivalent for\n        non-SQL backends), respectively. Normally, they should not be set.\n        \"\"\""
        },
        {
          "name": "save_base",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "raw",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "force_insert",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "force_update",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "update_fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Handle the parts of saving which should be done only once per save,\n        yet need to be done in raw saves, too. This includes some sanity\n        checks and signal sending.\n\n        The 'raw' argument is telling save_base not to save any parent\n        models and not to do any changes to the values before save. This\n        is used by fixture loading.\n        \"\"\""
        },
        {
          "name": "delete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "keep_parents",
              "annotation": null
            }
          ]
        },
        {
          "name": "prepare_database_save",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Hook for doing any extra model-wide validation after clean() has been\n        called on every field by self.clean_fields. Any ValidationError raised\n        by this method will not be associated with a particular field; it will\n        have a special-case association with the field defined by NON_FIELD_ERRORS.\n        \"\"\""
        },
        {
          "name": "validate_unique",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "exclude",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check unique constraints on the model and raise ValidationError if any\n        failed.\n        \"\"\""
        },
        {
          "name": "date_error_message",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "lookup_type",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "unique_for",
              "annotation": null
            }
          ]
        },
        {
          "name": "unique_error_message",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model_class",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "unique_check",
              "annotation": null
            }
          ]
        },
        {
          "name": "full_clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "exclude",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "validate_unique",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Call clean_fields(), clean(), and validate_unique() on the model.\n        Raise a ValidationError for any errors that occur.\n        \"\"\""
        },
        {
          "name": "clean_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "exclude",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Clean all fields and raise a ValidationError containing a dict\n        of all validation errors if any occur.\n        \"\"\""
        },
        {
          "name": "check",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        }
      ],
      "classes": []
    }
  ]
}