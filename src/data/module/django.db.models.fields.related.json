{
  "functions": [
    {
      "name": "resolve_relation",
      "params": [
        {
          "prefix": "",
          "name": "scope_model",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "relation",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Transform relation into a model or fully-qualified model string of the form\n    \"app_label.ModelName\", relative to scope_model.\n\n    The relation argument can be:\n      * RECURSIVE_RELATIONSHIP_CONSTANT, i.e. the string \"self\", in which case\n        the model argument will be returned.\n      * A bare model name without an app_label, in which case scope_model's\n        app_label will be prepended.\n      * An \"app_label.ModelName\" string.\n      * A model class, which will be returned unchanged.\n    \"\"\""
    },
    {
      "name": "lazy_related_operation",
      "params": [
        {
          "prefix": "",
          "name": "function",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "model",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "related_models",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Schedule `function` to be called once `model` and all `related_models`\n    have been imported and registered with the app registry. `function` will\n    be called with the newly-loaded model classes as its positional arguments,\n    plus any optional keyword arguments.\n\n    The `model` argument must be a model class. Each subsequent positional\n    argument is another model, or a reference to another model - see\n    `resolve_relation()` for the various forms these may take. Any relative\n    references will be resolved relative to `model`.\n\n    This is a convenience wrapper for `Apps.lazy_model_operation` - the app\n    registry model used is the one found in `model._meta.apps`.\n    \"\"\""
    },
    {
      "name": "create_many_to_many_intermediary_model",
      "params": [
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "klass",
          "annotation": null
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "RelatedField",
      "methods": [
        {
          "name": "related_model",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "contribute_to_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "private_only",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_forward_related_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the keyword arguments that when supplied to\n        self.model.object.filter(), would select all instances related through\n        this field to the remote obj. This is used to build the querysets\n        returned by related descriptors. obj is an instance of\n        self.related_field.model.\n        \"\"\""
        },
        {
          "name": "get_reverse_related_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Complement to get_forward_related_filter(). Return the keyword\n        arguments that when passed to self.related_field.model.object.filter()\n        select all instances of self.related_field.model related through\n        this field to obj. obj is an instance of self.model.\n        \"\"\""
        },
        {
          "name": "swappable_setting",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Get the setting that this is powered from for swapping, or None\n        if it's not swapped in / marked with swappable=False.\n        \"\"\""
        },
        {
          "name": "set_attributes_from_rel",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "do_related_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "other",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_limit_choices_to",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return ``limit_choices_to`` for this model field.\n\n        If it is a callable, it will be invoked and the result will be\n        returned.\n        \"\"\""
        },
        {
          "name": "formfield",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Pass ``limit_choices_to`` to the field being constructed.\n\n        Only passes it if there is a type that supports related fields.\n        This is a similar strategy used to pass the ``queryset`` to the field\n        being constructed.\n        \"\"\""
        },
        {
          "name": "related_query_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Define the name that can be used to identify this related object in a\n        table-spanning query.\n        \"\"\""
        },
        {
          "name": "target_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        When filtering against this relation, return the field on the remote\n        model against which the filtering should happen.\n        \"\"\""
        },
        {
          "name": "get_cache_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Base class that all relational fields inherit from.\"\"\""
    },
    {
      "name": "ForeignObject",
      "methods": [
        {
          "name": "check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "resolve_related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "reverse_related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "local_related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "foreign_related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "get_local_related_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_foreign_related_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_instance_value_for_fields",
          "params": [
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@staticmethod"
            }
          ]
        },
        {
          "name": "get_attname_column",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_joining_columns",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "reverse_join",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_reverse_joining_columns",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_extra_descriptor_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return an extra filter condition for related object fetching when\n        user does 'instance.fieldname', that is the extra filter is used in\n        the descriptor of the field.\n\n        The filter should be either a dict usable in .filter(**kwargs) call or\n        a Q-object. The condition will be ANDed together with the relation's\n        joining columns.\n\n        A parallel method is get_extra_restriction() which is used in\n        JOIN and subquery conditions.\n        \"\"\""
        },
        {
          "name": "get_extra_restriction",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related_alias",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a pair condition used for joining and subquery pushdown. The\n        condition is something that responds to as_sql(compiler, connection)\n        method.\n\n        Note that currently referring both the 'alias' and 'related_alias'\n        will not work in some conditions, like subquery pushdown.\n\n        A parallel method is get_extra_descriptor_filter() which is used in\n        instance.fieldname related object fetching.\n        \"\"\""
        },
        {
          "name": "get_path_info",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get path from this field to the related model.\"\"\""
        },
        {
          "name": "get_reverse_path_info",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get path from the related model to this field's model.\"\"\""
        },
        {
          "name": "get_lookups",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            },
            {
              "name": "@functools.lru_cache(maxsize=None)"
            }
          ]
        },
        {
          "name": "contribute_to_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "private_only",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "contribute_to_related_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Abstraction of the ForeignKey relation to support multi-column relations.\n    \"\"\""
    },
    {
      "name": "ForeignKey",
      "methods": [
        {
          "name": "check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "target_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "get_reverse_path_info",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get path from the related model to this field's model.\"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model_instance",
              "annotation": null
            }
          ]
        },
        {
          "name": "resolve_related_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_attname",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_attname_column",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_default",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the to_field if the default value is an object.\"\"\""
        },
        {
          "name": "get_db_prep_save",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_db_prep_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "prepared",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_prep_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "contribute_to_related_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related",
              "annotation": null
            }
          ]
        },
        {
          "name": "formfield",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_parameters",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "convert_empty_strings",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "expression",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_db_converters",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_col",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "output_field",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Provide a many-to-one relation by adding a column to the local model\n    to hold the remote value.\n\n    By default ForeignKey will target the pk of the remote model but this\n    behavior can be changed by using the ``to_field`` argument.\n    \"\"\""
    },
    {
      "name": "OneToOneField",
      "methods": [
        {
          "name": "deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "formfield",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "save_form_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A OneToOneField is essentially the same as a ForeignKey, with the exception\n    that it always carries a \"unique\" constraint with it and the reverse\n    relation always returns the object pointed to (since there will only ever\n    be one), rather than returning a list.\n    \"\"\""
    },
    {
      "name": "ManyToManyField",
      "methods": [
        {
          "name": "check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "deconstruct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_path_info",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_reverse_path_info",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ]
        },
        {
          "name": "contribute_to_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "contribute_to_related_class",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "related",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_attributes_from_rel",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "value_from_object",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ]
        },
        {
          "name": "save_form_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "instance",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        },
        {
          "name": "formfield",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_check",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "db_parameters",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Provide a many-to-many relation by using an intermediary model that\n    holds two ForeignKey fields pointed at the two sides of the relation.\n\n    Unless a ``through`` model was provided, ManyToManyField will use the\n    create_many_to_many_intermediary_model factory to automatically generate\n    the intermediary model.\n    \"\"\""
    }
  ]
}