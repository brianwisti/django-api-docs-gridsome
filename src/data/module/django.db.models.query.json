{
  "functions": [
    {
      "name": "normalize_prefetch_lookups",
      "params": [
        {
          "prefix": "",
          "name": "lookups",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "prefix",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Normalize lookups into Prefetch objects.\"\"\""
    },
    {
      "name": "prefetch_related_objects",
      "params": [
        {
          "prefix": "",
          "name": "model_instances",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "related_lookups",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Populate prefetched object caches for a list of model instances based on\n    the lookups/Prefetch instances given.\n    \"\"\""
    },
    {
      "name": "get_prefetcher",
      "params": [
        {
          "prefix": "",
          "name": "instance",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "through_attr",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "to_attr",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    For the attribute 'through_attr' on the given instance, find\n    an object that has a get_prefetch_queryset().\n    Return a 4 tuple containing:\n    (the object with get_prefetch_queryset (or None),\n     the descriptor object representing this relationship (or None),\n     a boolean that is False if the attribute was not found at all,\n     a function that takes an instance and returns a boolean that is True if\n     the attribute has already been fetched for that instance)\n    \"\"\""
    },
    {
      "name": "prefetch_one_level",
      "params": [
        {
          "prefix": "",
          "name": "instances",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "prefetcher",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "lookup",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "level",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Helper function for prefetch_related_objects().\n\n    Run prefetches on all instances using the prefetcher object,\n    assigning results to relevant caches in instance.\n\n    Return the prefetched objects along with any additional prefetches that\n    must be done due to prefetch_related lookups found from default managers.\n    \"\"\""
    },
    {
      "name": "get_related_populators",
      "params": [
        {
          "prefix": "",
          "name": "klass_info",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "select",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "db",
          "annotation": null
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "BaseIterable",
      "methods": [],
      "classes": []
    },
    {
      "name": "ModelIterable",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Iterable that yields a model instance for each row.\"\"\""
    },
    {
      "name": "ValuesIterable",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Iterable returned by QuerySet.values() that yields a dict for each row.\n    \"\"\""
    },
    {
      "name": "ValuesListIterable",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(flat=False) that yields a tuple\n    for each row.\n    \"\"\""
    },
    {
      "name": "NamedValuesListIterable",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(named=True) that yields a\n    namedtuple for each row.\n    \"\"\""
    },
    {
      "name": "FlatValuesListIterable",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Iterable returned by QuerySet.values_list(flat=True) that yields single\n    values.\n    \"\"\""
    },
    {
      "name": "QuerySet",
      "methods": [
        {
          "name": "query",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "query",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@query.setter"
            }
          ]
        },
        {
          "name": "as_manager",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ]
        },
        {
          "name": "iterator",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "chunk_size",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        An iterator over the results from applying this QuerySet to the\n        database.\n        \"\"\""
        },
        {
          "name": "aggregate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a dictionary containing the calculations (aggregation)\n        over the current queryset.\n\n        If args is present the expression is passed as a kwarg using\n        the Aggregate object's default alias.\n        \"\"\""
        },
        {
          "name": "count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Perform a SELECT COUNT() and return the number of records as an\n        integer.\n\n        If the QuerySet is already fully cached, return the length of the\n        cached results set to avoid multiple SELECT COUNT(*) calls.\n        \"\"\""
        },
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Perform the query and return a single object matching the given\n        keyword arguments.\n        \"\"\""
        },
        {
          "name": "create",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Create a new object with the given kwargs, saving it to the database\n        and returning the created object.\n        \"\"\""
        },
        {
          "name": "bulk_create",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "objs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "batch_size",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "ignore_conflicts",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Insert each of the instances into the database. Do *not* call\n        save() on each of the instances, do not send any pre/post_save\n        signals, and do not set the primary key attribute if it is an\n        autoincrement field (except if features.can_return_rows_from_bulk_insert=True).\n        Multi-table models are not supported.\n        \"\"\""
        },
        {
          "name": "bulk_update",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "objs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "batch_size",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Update the given fields in each of the given objects in the database.\n        \"\"\""
        },
        {
          "name": "get_or_create",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "defaults",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Look up an object with the given kwargs, creating one if necessary.\n        Return a tuple of (object, created), where created is a boolean\n        specifying whether an object was created.\n        \"\"\""
        },
        {
          "name": "update_or_create",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "defaults",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Look up an object with the given kwargs, updating one with defaults\n        if it exists, otherwise create a new one.\n        Return a tuple (object, created), where created is a boolean\n        specifying whether an object was created.\n        \"\"\""
        },
        {
          "name": "earliest",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            }
          ]
        },
        {
          "name": "latest",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            }
          ]
        },
        {
          "name": "first",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the first object of a query or None if no match is found.\"\"\""
        },
        {
          "name": "last",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the last object of a query or None if no match is found.\"\"\""
        },
        {
          "name": "in_bulk",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "id_list",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a dictionary mapping each of the given IDs to the object with\n        that ID. If `id_list` isn't provided, evaluate the entire QuerySet.\n        \"\"\""
        },
        {
          "name": "delete",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Delete the records in the current QuerySet.\"\"\""
        },
        {
          "name": "update",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Update all elements in the current QuerySet, setting all the given\n        fields to the appropriate values.\n        \"\"\""
        },
        {
          "name": "exists",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "contains",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if the queryset contains an object.\"\"\""
        },
        {
          "name": "explain",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "options",
              "annotation": null
            }
          ]
        },
        {
          "name": "raw",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "raw_query",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "params",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "translations",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            }
          ]
        },
        {
          "name": "values",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "expressions",
              "annotation": null
            }
          ]
        },
        {
          "name": "values_list",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "flat",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "named",
              "annotation": null
            }
          ]
        },
        {
          "name": "dates",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "kind",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "order",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a list of date objects representing all available dates for\n        the given field_name, scoped to 'kind'.\n        \"\"\""
        },
        {
          "name": "datetimes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "kind",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "order",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "tzinfo",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "is_dst",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a list of datetime objects representing all available\n        datetimes for the given field_name, scoped to 'kind'.\n        \"\"\""
        },
        {
          "name": "none",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return an empty QuerySet.\"\"\""
        },
        {
          "name": "all",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet that is a copy of the current one. This allows a\n        QuerySet to proxy for a model manager in some cases.\n        \"\"\""
        },
        {
          "name": "filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance with the args ANDed to the existing\n        set.\n        \"\"\""
        },
        {
          "name": "exclude",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance with NOT (args) ANDed to the existing\n        set.\n        \"\"\""
        },
        {
          "name": "complex_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance with filter_obj added to the filters.\n\n        filter_obj can be a Q object or a dictionary of keyword lookup\n        arguments.\n\n        This exists to support framework features such as 'limit_choices_to',\n        and usually it will be more natural to use other methods.\n        \"\"\""
        },
        {
          "name": "union",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "other_qs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "all",
              "annotation": null
            }
          ]
        },
        {
          "name": "intersection",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "other_qs",
              "annotation": null
            }
          ]
        },
        {
          "name": "difference",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "other_qs",
              "annotation": null
            }
          ]
        },
        {
          "name": "select_for_update",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "nowait",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "skip_locked",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "of",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "no_key",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance that will select objects with a\n        FOR UPDATE lock.\n        \"\"\""
        },
        {
          "name": "select_related",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance that will select related objects.\n\n        If fields are specified, they must be ForeignKey fields and only those\n        related objects are included in the selection.\n\n        If select_related(None) is called, clear the list.\n        \"\"\""
        },
        {
          "name": "prefetch_related",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "lookups",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance that will prefetch the specified\n        Many-To-One and Many-To-Many related objects when the QuerySet is\n        evaluated.\n\n        When prefetch_related() is called more than once, append to the list of\n        prefetch lookups. If prefetch_related(None) is called, clear the list.\n        \"\"\""
        },
        {
          "name": "annotate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a query set in which the returned objects have been annotated\n        with extra data or aggregations.\n        \"\"\""
        },
        {
          "name": "alias",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a query set with added aliases for extra data or aggregations.\n        \"\"\""
        },
        {
          "name": "order_by",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "field_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return a new QuerySet instance with the ordering changed.\"\"\""
        },
        {
          "name": "distinct",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "field_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new QuerySet instance that will select only distinct results.\n        \"\"\""
        },
        {
          "name": "extra",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "select",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "where",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "params",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "tables",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "order_by",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "select_params",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Add extra SQL fragments to the query.\"\"\""
        },
        {
          "name": "reverse",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Reverse the ordering of the QuerySet.\"\"\""
        },
        {
          "name": "defer",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Defer the loading of data for certain fields until they are accessed.\n        Add the set of deferred fields to any existing set of deferred fields.\n        The only exception to this is if None is passed in as the only\n        parameter, in which case removal all deferrals.\n        \"\"\""
        },
        {
          "name": "only",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Essentially, the opposite of defer(). Only the fields passed into this\n        method and that are not already specified as deferred are loaded\n        immediately when the queryset is evaluated.\n        \"\"\""
        },
        {
          "name": "using",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Select which database this QuerySet should execute against.\"\"\""
        },
        {
          "name": "ordered",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "###################################\n    # PUBLIC INTROSPECTION ATTRIBUTES #\n    ###################################\n\n    @property"
            }
          ],
          "docstring": "\"\"\"\n        Return True if the QuerySet is ordered -- i.e. has an order_by()\n        clause or a default ordering on the model (or is empty).\n        \"\"\""
        },
        {
          "name": "db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return the database used if this query is executed now.\"\"\""
        },
        {
          "name": "resolve_expression",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Represent a lazy database lookup for a set of objects.\"\"\""
    },
    {
      "name": "InstanceCheckMeta",
      "methods": [],
      "classes": []
    },
    {
      "name": "EmptyQuerySet",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Marker class to checking if a queryset is empty by .none():\n        isinstance(qs.none(), EmptyQuerySet) -> True\n    \"\"\""
    },
    {
      "name": "RawQuerySet",
      "methods": [
        {
          "name": "resolve_model_init_order",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Resolve the init field names and value positions.\"\"\""
        },
        {
          "name": "prefetch_related",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "lookups",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Same as QuerySet.prefetch_related()\"\"\""
        },
        {
          "name": "iterator",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "db",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return the database used if this query is executed now.\"\"\""
        },
        {
          "name": "using",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Select the database this RawQuerySet should execute against.\"\"\""
        },
        {
          "name": "columns",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ],
          "docstring": "\"\"\"\n        A list of model field names in the order they'll appear in the\n        query results.\n        \"\"\""
        },
        {
          "name": "model_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ],
          "docstring": "\"\"\"A dict mapping column names to model field names.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Provide an iterator which converts the results of raw SQL queries into\n    annotated model instances.\n    \"\"\""
    },
    {
      "name": "Prefetch",
      "methods": [
        {
          "name": "add_prefix",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "prefix",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_current_prefetch_to",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "level",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_current_to_attr",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "level",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_current_queryset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "level",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "RelatedPopulator",
      "methods": [
        {
          "name": "populate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "row",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "from_obj",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    RelatedPopulator is used for select_related() object instantiation.\n\n    The idea is that each select_related() model will be populated by a\n    different RelatedPopulator instance. The RelatedPopulator instances get\n    klass_info and select (computed in SQLCompiler) plus the used db as\n    input for initialization. That data is used to compute which columns\n    to use, how to instantiate the model, and how to populate the links\n    between the objects.\n\n    The actual creation of the objects is done in populate() method. This\n    method gets row and from_obj as input and populates the select_related()\n    model instance.\n    \"\"\""
    }
  ],
  "doc": "\"\"\"\nThe main QuerySet implementation. This provides the public API for the ORM.\n\"\"\""
}