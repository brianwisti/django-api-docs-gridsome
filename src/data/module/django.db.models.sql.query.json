{
  "functions": [
    {
      "name": "get_field_names_from_opts",
      "params": [
        {
          "prefix": "",
          "name": "opts",
          "annotation": null
        }
      ]
    },
    {
      "name": "get_children_from_q",
      "params": [
        {
          "prefix": "",
          "name": "q",
          "annotation": null
        }
      ]
    },
    {
      "name": "get_order_dir",
      "params": [
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "default",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\""
    },
    {
      "name": "add_to_dict",
      "params": [
        {
          "prefix": "",
          "name": "data",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "key",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Add \"value\" to the set of values for \"key\", whether or not \"key\" already\n    exists.\n    \"\"\""
    },
    {
      "name": "is_reverse_o2o",
      "params": [
        {
          "prefix": "",
          "name": "field",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Check if the given field is reverse-o2o. The field is expected to be some\n    sort of relation field or related object.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "RawQuery",
      "methods": [
        {
          "name": "chain",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            }
          ]
        },
        {
          "name": "clone",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_columns",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "params_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"A single raw SQL query.\"\"\""
    },
    {
      "name": "Query",
      "methods": [
        {
          "name": "output_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "has_select_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "base_table",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "sql_with_params",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the query as an SQL string and the parameters that will be\n        substituted into the query.\n        \"\"\""
        },
        {
          "name": "get_compiler",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "elide_empty",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_meta",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the Options instance (the model._meta) from which to start\n        processing. Normally, this is self.model._meta, but it can be changed\n        by subclasses.\n        \"\"\""
        },
        {
          "name": "clone",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a copy of the current Query. A lightweight alternative to\n        to deepcopy().\n        \"\"\""
        },
        {
          "name": "chain",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "klass",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a copy of the current Query that's ready for another operation.\n        The klass argument changes the type of the Query, e.g. UpdateQuery.\n        \"\"\""
        },
        {
          "name": "relabeled_clone",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "change_map",
              "annotation": null
            }
          ]
        },
        {
          "name": "rewrite_cols",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "annotation",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "col_cnt",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_aggregation",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "added_aggregate_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the dictionary with the values of the existing aggregations.\n        \"\"\""
        },
        {
          "name": "get_count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Perform a COUNT() query using the current filter constraints.\n        \"\"\""
        },
        {
          "name": "has_filters",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "exists",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "limit",
              "annotation": null
            }
          ]
        },
        {
          "name": "has_results",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            }
          ]
        },
        {
          "name": "explain",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "using",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "options",
              "annotation": null
            }
          ]
        },
        {
          "name": "combine",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rhs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connector",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Merge the 'rhs' query into the current one (with any 'rhs' effects\n        being applied *after* (that is, \"to the right of\") anything in the\n        current query. 'rhs' is not modified during a call to this function.\n\n        The 'connector' parameter describes how to connect filters from the\n        'rhs' query.\n        \"\"\""
        },
        {
          "name": "deferred_to_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "target",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "callback",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Convert the self.deferred_loading data structure to an alternate data\n        structure, describing the field that *will* be loaded. This is used to\n        compute the columns to select from the database and also by the\n        QuerySet class to work out which fields are being initialized on each\n        model. Models that have all their fields included aren't mentioned in\n        the result, only those that have field restrictions in place.\n\n        The \"target\" parameter is the instance that is populated (in place).\n        The \"callback\" is a function that is called whenever a (model, field)\n        pair need to be added to \"target\". It accepts three parameters:\n        \"target\", and the model and list of fields being added for that model.\n        \"\"\""
        },
        {
          "name": "table_alias",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "table_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "create",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a table alias for the given table_name and whether this is a\n        new alias or not.\n\n        If 'create' is true, a new alias is always created. Otherwise, the\n        most recently created alias for the table (if one exists) is reused.\n        \"\"\""
        },
        {
          "name": "ref_alias",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Increases the reference count for this alias.\"\"\""
        },
        {
          "name": "unref_alias",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "amount",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Decreases the reference count for this alias.\"\"\""
        },
        {
          "name": "promote_joins",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "aliases",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Promote recursively the join type of given aliases and its children to\n        an outer join. If 'unconditional' is False, only promote the join if\n        it is nullable or the parent join is an outer join.\n\n        The children promotion is done to avoid join chains that contain a LOUTER\n        b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,\n        then we must also promote b->c automatically, or otherwise the promotion\n        of a->b doesn't actually change anything in the query results.\n        \"\"\""
        },
        {
          "name": "demote_joins",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "aliases",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Change join type from LOUTER to INNER for all joins in aliases.\n\n        Similarly to promote_joins(), this method must ensure no join chains\n        containing first an outer, then an inner join are generated. If we\n        are demoting b->c join in chain a LOUTER b LOUTER c then we must\n        demote a->b automatically, or otherwise the demotion of b->c doesn't\n        actually change anything in the query results. .\n        \"\"\""
        },
        {
          "name": "reset_refcounts",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "to_counts",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Reset reference counts for aliases so that they match the value passed\n        in `to_counts`.\n        \"\"\""
        },
        {
          "name": "change_aliases",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "change_map",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Change the aliases in change_map (which maps old-alias -> new-alias),\n        relabelling any references to them in select columns and the where\n        clause.\n        \"\"\""
        },
        {
          "name": "bump_prefix",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "outer_query",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Change the alias prefix to the next letter in the alphabet in a way\n        that the outer query's aliases and this query's aliases will not\n        conflict. Even tables that previously had no alias will get an alias\n        after this call.\n        \"\"\""
        },
        {
          "name": "get_initial_alias",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the first alias for this query, after increasing its reference\n        count.\n        \"\"\""
        },
        {
          "name": "count_active_tables",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the number of tables in this query with a non-zero reference\n        count. After execution, the reference counts are zeroed, so tables\n        added in compiler will not be seen by this method.\n        \"\"\""
        },
        {
          "name": "join",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "join",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "reuse",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return an alias for the 'join', either reusing an existing alias for\n        that join or creating a new one. 'join' is either a\n        sql.datastructures.BaseTable or Join.\n\n        The 'reuse' parameter can be either None which means all joins are\n        reusable, or it can be a set containing the aliases that can be reused.\n\n        A join is always created as LOUTER if the lhs alias is LOUTER to make\n        sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new\n        joins are created as LOUTER if the join is nullable.\n        \"\"\""
        },
        {
          "name": "join_parent_model",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "opts",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "seen",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Make sure the given 'model' is joined in the query. If 'model' isn't\n        a parent of 'opts' or if it is None this method is a no-op.\n\n        The 'alias' is the root alias for starting the join, 'seen' is a dict\n        of model -> alias of existing joins. It must also contain a mapping\n        of None -> some alias. This will be returned in the no-op case.\n        \"\"\""
        },
        {
          "name": "add_annotation",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "annotation",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "is_summary",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "select",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Add a single annotation expression to the Query.\"\"\""
        },
        {
          "name": "resolve_expression",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "query",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_external_cols",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "as_sql",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "compiler",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "connection",
              "annotation": null
            }
          ]
        },
        {
          "name": "resolve_lookup_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "can_reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_joins",
              "annotation": null
            }
          ]
        },
        {
          "name": "solve_lookup_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "lookup",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Solve the lookup type from the lookup (e.g.: 'foobar__id__icontains').\n        \"\"\""
        },
        {
          "name": "check_query_object_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "opts",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check whether the object passed while querying is of the correct type.\n        If not, raise a ValueError specifying the wrong object.\n        \"\"\""
        },
        {
          "name": "check_related_objects",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "opts",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Check the type of object passed to query relations.\"\"\""
        },
        {
          "name": "check_filterable",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "expression",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\""
        },
        {
          "name": "build_lookup",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "lookups",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "lhs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rhs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Try to extract transforms and lookup from given lhs.\n\n        The lhs value is something that works like SQLExpression.\n        The rhs value is what the lookup is going to compare against.\n        The lookups is a list of names to extract using get_lookup()\n        and get_transform().\n        \"\"\""
        },
        {
          "name": "try_transform",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "lhs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Helper method for build_lookup(). Try to fetch and initialize\n        a transform for name parameter from lhs.\n        \"\"\""
        },
        {
          "name": "build_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_expr",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "branch_negated",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "current_negated",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "can_reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_joins",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "split_subq",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "check_filterable",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Build a WhereNode for a single filter clause but don't add it\n        to this Query. Query.add_q() will then add this filter to the where\n        Node.\n\n        The 'branch_negated' tells us if the current branch contains any\n        negations. This will be used to determine if subqueries are needed.\n\n        The 'current_negated' is used to determine if the current filter is\n        negated or not and this will be used to determine if IS NULL filtering\n        is needed.\n\n        The difference between current_negated and branch_negated is that\n        branch_negated is set on first negation, but current_negated is\n        flipped for each negation.\n\n        Note that add_filter will not do any negating itself, that is done\n        upper in the code by add_q().\n\n        The 'can_reuse' is a set of reusable joins for multijoins.\n\n        The method will create a filter clause that can be added to the current\n        query. However, if the filter isn't added to the query then the caller\n        is responsible for unreffing the joins used.\n        \"\"\""
        },
        {
          "name": "add_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_lhs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_rhs",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_q",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "q_object",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        A preprocessor for the internal _add_q(). Responsible for doing final\n        join promotion.\n        \"\"\""
        },
        {
          "name": "build_where",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_expr",
              "annotation": null
            }
          ]
        },
        {
          "name": "clear_where",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "build_filtered_relation_q",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "q_object",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "branch_negated",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "current_negated",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Add a FilteredRelation object to the current filter.\"\"\""
        },
        {
          "name": "add_filtered_relation",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filtered_relation",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            }
          ]
        },
        {
          "name": "names_to_path",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "opts",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_many",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fail_on_missing",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Walk the list of names and turns them into PathInfo tuples. A single\n        name in 'names' can generate multiple PathInfos (m2m, for example).\n\n        'names' is the path of names to travel, 'opts' is the model Options we\n        start the name resolving from, 'allow_many' is as for setup_joins().\n        If fail_on_missing is set to True, then a name that can't be resolved\n        will generate a FieldError.\n\n        Return a list of PathInfo tuples. In addition return the final field\n        (the last used join field) and target (which is a field guaranteed to\n        contain the same value as the final field). Finally, return those names\n        that weren't found (which are likely transforms and the final lookup).\n        \"\"\""
        },
        {
          "name": "setup_joins",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "opts",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "alias",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "can_reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_many",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Compute the necessary table joins for the passage through the fields\n        given in 'names'. 'opts' is the Options class for the current model\n        (which gives the table we are starting from), 'alias' is the alias for\n        the table to start the joining from.\n\n        The 'can_reuse' defines the reverse foreign key joins we can reuse. It\n        can be None in which case all joins are reusable or a set of aliases\n        that can be reused. Note that non-reverse foreign keys are always\n        reusable when using setup_joins().\n\n        If 'allow_many' is False, then any reverse foreign key seen will\n        generate a MultiJoin exception.\n\n        Return the final field involved in the joins, the target field (used\n        for any 'where' constraint), the final 'opts' value, the joins, the\n        field path traveled to generate the joins, and a transform function\n        that takes a field and alias and is equivalent to `field.get_col(alias)`\n        in the simple case but wraps field transforms if they were included in\n        names.\n\n        The target field is the field containing the concrete value. Final\n        field can be something different, for example foreign key pointing to\n        that value. Final field is needed for example in some value\n        conversions (convert 'obj' in fk__id=obj to pk val using the foreign\n        key field for example).\n        \"\"\""
        },
        {
          "name": "trim_joins",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "targets",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "joins",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "path",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        The 'target' parameter is the final field being joined to, 'joins'\n        is the full list of join aliases. The 'path' contain the PathInfos\n        used to create the joins.\n\n        Return the final target field and table alias and the new active\n        joins.\n\n        Always trim any direct join if the target column is already in the\n        previous table. Can't trim reverse joins as it's unknown if there's\n        anything on the other side of the join.\n        \"\"\""
        },
        {
          "name": "resolve_ref",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_joins",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "summarize",
              "annotation": null
            }
          ]
        },
        {
          "name": "split_exclude",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "filter_expr",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "can_reuse",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names_with_path",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        When doing an exclude against any kind of N-to-many relation, we need\n        to use a subquery. This method constructs the nested query, given the\n        original exclude filter (filter_expr) and the portion up to the first\n        N-to-many relation field.\n\n        For example, if the origin filter is ~Q(child__name='foo'), filter_expr\n        is ('child__name', 'foo') and can_reuse is a set of joins usable for\n        filters in the original query.\n\n        We will turn this into equivalent of:\n            WHERE NOT EXISTS(\n                SELECT 1\n                FROM child\n                WHERE name = 'foo' AND child.parent_id = parent.id\n                LIMIT 1\n            )\n        \"\"\""
        },
        {
          "name": "set_empty",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "is_empty",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_limits",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "low",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "high",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Adjust the limits on the rows retrieved. Use low/high to set these,\n        as it makes it more Pythonic to read and write. When the SQL query is\n        created, convert them to the appropriate offset and limit values.\n\n        Apply any limits passed in here to the existing constraints. Add low\n        to the current low value and clamp both to any existing high value.\n        \"\"\""
        },
        {
          "name": "clear_limits",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Clear any existing limits.\"\"\""
        },
        {
          "name": "is_sliced",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "has_limit_one",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "can_filter",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return True if adding filters to this instance is still possible.\n\n        Typically, this means no limits or offsets have been put on the results.\n        \"\"\""
        },
        {
          "name": "clear_select_clause",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Remove all fields from SELECT clause.\"\"\""
        },
        {
          "name": "clear_select_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Clear the list of fields to select (but not extra_select columns).\n        Some queryset types completely replace any existing list of select\n        columns.\n        \"\"\""
        },
        {
          "name": "add_select_col",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "col",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_select",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "cols",
              "annotation": null
            }
          ]
        },
        {
          "name": "add_distinct_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "field_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add and resolve the given fields to the query's \"distinct on\" clause.\n        \"\"\""
        },
        {
          "name": "add_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_names",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_m2m",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add the given (model) fields to the select set. Add the field names in\n        the order specified.\n        \"\"\""
        },
        {
          "name": "add_ordering",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "ordering",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add items from the 'ordering' sequence to the query's \"order by\"\n        clause. These items are either field names (not column names) --\n        possibly with a direction prefix ('-' or '?') -- or OrderBy\n        expressions.\n\n        If 'ordering' is empty, clear all ordering from the query.\n        \"\"\""
        },
        {
          "name": "clear_ordering",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "force",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "clear_default",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Remove any ordering settings if the current query allows it without\n        side effects, set 'force' to True to clear the ordering regardless.\n        If 'clear_default' is True, there will be no ordering in the resulting\n        query (not even the model's default).\n        \"\"\""
        },
        {
          "name": "set_group_by",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_aliases",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Expand the GROUP BY clause required by the query.\n\n        This will usually be the set of all non-aggregate fields in the\n        return data. If the database backend supports grouping by the\n        primary key, and the query would be equivalent, the optimization\n        will be made automatically.\n        \"\"\""
        },
        {
          "name": "add_select_related",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set up the select_related data structure so that we only select\n        certain related models (as opposed to all models, when\n        self.select_related=True).\n        \"\"\""
        },
        {
          "name": "add_extra",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "select",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "select_params",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "where",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "params",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "tables",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "order_by",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add data to the various extra_* attributes for user-created additions\n        to the query.\n        \"\"\""
        },
        {
          "name": "clear_deferred_loading",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Remove any fields from the deferred loading set.\"\"\""
        },
        {
          "name": "add_deferred_loading",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add the given list of model field names to the set of fields to\n        exclude from loading from the database when automatic column selection\n        is done. Add the new field names to any existing field names that\n        are deferred (or removed from any existing field names that are marked\n        as the only ones for immediate loading).\n        \"\"\""
        },
        {
          "name": "add_immediate_loading",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add the given list of model field names to the set of fields to\n        retrieve when the SQL is executed (\"immediate loading\" fields). The\n        field names replace any existing immediate loading field names. If\n        there are field names already specified for deferred loading, remove\n        those names from the new field_names before storing the new names\n        for immediate loading. (That is, immediate loading overrides any\n        existing immediate values, but respects existing deferrals.)\n        \"\"\""
        },
        {
          "name": "get_loaded_field_names",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        If any fields are marked to be deferred, return a dictionary mapping\n        models to a set of names in those fields that will be loaded. If a\n        model is not in the returned dictionary, none of its fields are\n        deferred.\n\n        If no fields are marked for deferral, return an empty dictionary.\n        \"\"\""
        },
        {
          "name": "get_loaded_field_names_cb",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "target",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "model",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Callback used by get_deferred_field_names().\"\"\""
        },
        {
          "name": "set_annotation_mask",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Set the mask of annotations that will be returned by the SELECT.\"\"\""
        },
        {
          "name": "append_annotation_mask",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_extra_mask",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set the mask of extra select items that will be returned by SELECT.\n        Don't remove them from the Query since they might be used later.\n        \"\"\""
        },
        {
          "name": "set_values",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "fields",
              "annotation": null
            }
          ]
        },
        {
          "name": "annotation_select",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Return the dictionary of aggregate columns that are not masked and\n        should be used in the SELECT clause. Cache this result for performance.\n        \"\"\""
        },
        {
          "name": "extra_select",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "trim_start",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "names_with_path",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Trim joins from the start of the join path. The candidates for trim\n        are the PathInfos in names_with_path structure that are m2m joins.\n\n        Also set the select column so the start matches the join.\n\n        This method is meant to be used for generating the subquery joins &\n        cols in split_exclude().\n\n        Return a lookup usable for doing outerq.filter(lookup=self) and a\n        boolean indicating if the joins in the prefix contain a LEFT OUTER join.\n        _\"\"\""
        },
        {
          "name": "is_nullable",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check if the given field should be treated as nullable.\n\n        Some backends treat '' as null and Django treats such fields as\n        nullable for those backends. In such situations field.null can be\n        False even if we should treat the field as nullable.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"A single SQL query.\"\"\""
    },
    {
      "name": "JoinPromoter",
      "methods": [
        {
          "name": "add_votes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "votes",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Add single vote per item to self.votes. Parameter can be any\n        iterable.\n        \"\"\""
        },
        {
          "name": "update_join_types",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "query",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Change join types so that the generated query is as efficient as\n        possible, but still correct. So, change as many joins as possible\n        to INNER, but don't make OUTER joins INNER if that could remove\n        results from the query.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A class to abstract away join promotion problems for complex filter\n    conditions.\n    \"\"\""
    }
  ],
  "docstring": "\"\"\"\nCreate SQL statements for QuerySets.\n\nThe code in here encapsulates all of the SQL construction so that QuerySets\nthemselves do not have to (and could be backed by things other than SQL\ndatabases). The abstraction barrier only works one way: this module has to know\nall about the internals of models in order to get the information it needs.\n\"\"\""
}