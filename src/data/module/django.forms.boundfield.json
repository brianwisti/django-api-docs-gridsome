{
  "functions": [],
  "classes": [
    {
      "name": "BoundField",
      "methods": [
        {
          "name": "subwidgets",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ],
          "docstring": "\"\"\"\n        Most widgets yield a single subwidget, but others like RadioSelect and\n        CheckboxSelectMultiple produce one subwidget for each choice.\n\n        This property is cached so that only one database query occurs when\n        rendering ModelChoiceFields.\n        \"\"\""
        },
        {
          "name": "errors",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Return an ErrorList (empty if there are no errors) for this field.\n        \"\"\""
        },
        {
          "name": "as_widget",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "only_initial",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Render the field by rendering the passed widget, adding any HTML\n        attributes passed as attrs. If a widget isn't specified, use the\n        field's default widget.\n        \"\"\""
        },
        {
          "name": "as_text",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a string of HTML for representing this as an <input type=\"text\">.\n        \"\"\""
        },
        {
          "name": "as_textarea",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return a string of HTML for representing this as a <textarea>.\"\"\""
        },
        {
          "name": "as_hidden",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a string of HTML for representing this as an <input type=\"hidden\">.\n        \"\"\""
        },
        {
          "name": "data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Return the data for this BoundField, or None if it wasn't given.\n        \"\"\""
        },
        {
          "name": "value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the value for this BoundField, using the initial value if\n        the form is not bound or the data otherwise.\n        \"\"\""
        },
        {
          "name": "label_tag",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "contents",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "label_suffix",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Wrap the given contents in a <label>, if the field has an ID attribute.\n        contents should be mark_safe'd to avoid HTML escaping. If contents\n        aren't given, use the field's HTML-escaped label.\n\n        If attrs are given, use them as HTML attributes on the <label> tag.\n\n        label_suffix overrides the form's label_suffix.\n        \"\"\""
        },
        {
          "name": "css_classes",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "extra_classes",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a string of space-separated CSS classes for this field.\n        \"\"\""
        },
        {
          "name": "is_hidden",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return True if this BoundField's widget is hidden.\"\"\""
        },
        {
          "name": "auto_id",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Calculate and return the ID attribute for this BoundField, if the\n        associated Form has specified auto_id. Return an empty string otherwise.\n        \"\"\""
        },
        {
          "name": "id_for_label",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Wrapper around the field widget's `id_for_label` method.\n        Useful, for example, for focusing on this field regardless of whether\n        it has a single widget or a MultiWidget.\n        \"\"\""
        },
        {
          "name": "initial",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "build_widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "attrs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        },
        {
          "name": "widget_type",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"A Field plus data\"",
      "decorators": [
        {
          "name": "@html_safe"
        }
      ]
    },
    {
      "name": "BoundWidget",
      "methods": [
        {
          "name": "tag",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "wrap_label",
              "annotation": null
            }
          ]
        },
        {
          "name": "template_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "id_for_label",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "choice_label",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A container class used for iterating over widgets. This is useful for\n    widgets that have choices. For example, the following can be used in a\n    template:\n\n    {% for radio in myform.beatles %}\n      <label for=\"{{ radio.id_for_label }}\">\n        {{ radio.choice_label }}\n        <span class=\"radio\">{{ radio.tag }}</span>\n      </label>\n    {% endfor %}\n    \"\"\"",
      "decorators": [
        {
          "name": "@html_safe"
        }
      ]
    }
  ]
}