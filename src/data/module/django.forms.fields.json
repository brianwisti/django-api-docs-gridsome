{
  "functions": [],
  "classes": [
    {
      "name": "Field",
      "methods": [
        {
          "name": "prepare_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "run_validators",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate the given value and return its \"cleaned\" value as an\n        appropriate Python object. Raise ValidationError for any errors.\n        \"\"\""
        },
        {
          "name": "bound_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the value that should be shown for this field on render of a\n        bound form, given the submitted POST data for the field and the initial\n        data, if any.\n\n        For most fields, this will simply be data; FileFields need to handle it\n        a bit differently.\n        \"\"\""
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given a Widget instance (*not* a Widget class), return a dictionary of\n        any HTML attributes that should be added to the Widget, based on this\n        Field.\n        \"\"\""
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if data differs from initial.\"\"\""
        },
        {
          "name": "get_bound_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "form",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "field_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a BoundField instance that will be used when accessing the form\n        field in a template.\n        \"\"\""
        }
      ],
      "classes": []
    },
    {
      "name": "CharField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return a string.\"\"\""
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "IntegerField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that int() can be called on the input. Return the result\n        of int() or None for empty values.\n        \"\"\""
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "FloatField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that float() can be called on the input. Return the result\n        of float() or None for empty values.\n        \"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DecimalField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that the input is a decimal number. Return a Decimal\n        instance or None for empty values. Ensure that there are no more\n        than max_digits in the number and no more than decimal_places digits\n        after the decimal point.\n        \"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "BaseTemporalField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "strptime",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DateField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that the input can be converted to a date. Return a Python\n        datetime.date object.\n        \"\"\""
        },
        {
          "name": "strptime",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "TimeField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that the input can be converted to a time. Return a Python\n        datetime.time object.\n        \"\"\""
        },
        {
          "name": "strptime",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DateTimeFormatsIterator",
      "methods": [],
      "classes": []
    },
    {
      "name": "DateTimeField",
      "methods": [
        {
          "name": "prepare_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate that the input can be converted to a datetime. Return a\n        Python datetime.datetime object.\n        \"\"\""
        },
        {
          "name": "strptime",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "format",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DurationField",
      "methods": [
        {
          "name": "prepare_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "RegexField",
      "methods": [],
      "classes": []
    },
    {
      "name": "EmailField",
      "methods": [],
      "classes": []
    },
    {
      "name": "FileField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            }
          ]
        },
        {
          "name": "bound_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            }
          ]
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ImageField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Check that the file-upload field data contains a valid image (GIF, JPG,\n        PNG, etc. -- whatever Pillow supports).\n        \"\"\""
        },
        {
          "name": "widget_attrs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "widget",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "URLField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "BooleanField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return a Python boolean object.\"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "NullBooleanField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Explicitly check for the string 'True' and 'False', which is what a\n        hidden field will submit for True and False, for 'true' and 'false',\n        which are likely to be returned by JavaScript serializations of forms,\n        and for '1' and '0', which is what a RadioField will submit. Unlike\n        the Booleanfield, this field must check for True because it doesn't\n        use the bool() function.\n        \"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A field whose valid values are None, True, and False. Clean invalid values\n    to None.\n    \"\"\""
    },
    {
      "name": "CallableChoiceIterator",
      "methods": [],
      "classes": []
    },
    {
      "name": "ChoiceField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return a string.\"\"\""
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Validate that the input is in self.choices.\"\"\""
        },
        {
          "name": "valid_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Check to see if the provided value is a valid choice.\"\"\""
        }
      ],
      "classes": []
    },
    {
      "name": "TypedChoiceField",
      "methods": [
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "MultipleChoiceField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Validate that the input is a list or tuple.\"\"\""
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "TypedMultipleChoiceField",
      "methods": [
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ComboField",
      "methods": [
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate the given value against all of self.fields, which is a\n        list of Field instances.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A Field whose clean() method calls multiple Field clean() methods.\n    \"\"\""
    },
    {
      "name": "MultiValueField",
      "methods": [
        {
          "name": "validate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Validate every value in the given list. A value is validated against\n        the corresponding Field in self.fields.\n\n        For example, if this MultiValueField was instantiated with\n        fields=(DateField(), TimeField()), clean() would call\n        DateField.clean(value[0]) and TimeField.clean(value[1]).\n        \"\"\""
        },
        {
          "name": "compress",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data_list",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a single value for the given list of values. The values can be\n        assumed to be valid.\n\n        For example, if this MultiValueField was instantiated with\n        fields=(DateField(), TimeField()), this might return a datetime\n        object created by combining the date and time in data_list.\n        \"\"\""
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Aggregate the logic of multiple Fields.\n\n    Its clean() method takes a \"decompressed\" list of values, which are then\n    cleaned into a single value according to self.fields. Each value in\n    this list is cleaned by the corresponding field -- the first value is\n    cleaned by the first field, the second value is cleaned by the second\n    field, etc. Once all fields are cleaned, the list of clean values is\n    \"compressed\" into a single value.\n\n    Subclasses should not have to implement clean(). Instead, they must\n    implement compress(), which takes a list of valid values and returns a\n    \"compressed\" version of those values -- a single value.\n\n    You'll probably want to use this with MultiWidget.\n    \"\"\""
    },
    {
      "name": "FilePathField",
      "methods": [],
      "classes": []
    },
    {
      "name": "SplitDateTimeField",
      "methods": [
        {
          "name": "compress",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data_list",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "GenericIPAddressField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "SlugField",
      "methods": [],
      "classes": []
    },
    {
      "name": "UUIDField",
      "methods": [
        {
          "name": "prepare_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "InvalidJSONInput",
      "methods": [],
      "classes": []
    },
    {
      "name": "JSONString",
      "methods": [],
      "classes": []
    },
    {
      "name": "JSONField",
      "methods": [
        {
          "name": "to_python",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "bound_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            }
          ]
        },
        {
          "name": "prepare_value",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "initial",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    }
  ],
  "doc": "\"\"\"\nField classes.\n\"\"\""
}