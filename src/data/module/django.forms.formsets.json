{
  "functions": [
    {
      "name": "formset_factory",
      "params": [
        {
          "prefix": "",
          "name": "form",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "formset",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "extra",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "can_order",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "can_delete",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "max_num",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "validate_max",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "min_num",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "validate_min",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "absolute_max",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "can_delete_extra",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "renderer",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return a FormSet for the given form class.\"\"\""
    },
    {
      "name": "all_valid",
      "params": [
        {
          "prefix": "",
          "name": "formsets",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Validate every formset and return True if all are valid.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "ManagementForm",
      "methods": [
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Keep track of how many form instances are displayed on the page. If adding\n    new forms via JavaScript, you should increment the count field of this form\n    as well.\n    \"\"\""
    },
    {
      "name": "BaseFormSet",
      "methods": [
        {
          "name": "management_form",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ],
          "docstring": "\"\"\"Return the ManagementForm instance for this FormSet.\"\"\""
        },
        {
          "name": "total_form_count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the total number of forms in this FormSet.\"\"\""
        },
        {
          "name": "initial_form_count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the number of forms that are required in this FormSet.\"\"\""
        },
        {
          "name": "forms",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ],
          "docstring": "\"\"\"Instantiate forms at first property access.\"\"\""
        },
        {
          "name": "get_form_kwargs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "index",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return additional keyword arguments for each individual formset form.\n\n        index will be None if the form being constructed is a new empty\n        form.\n        \"\"\""
        },
        {
          "name": "initial_forms",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return a list of all the initial forms in this formset.\"\"\""
        },
        {
          "name": "extra_forms",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return a list of all the extra forms in this formset.\"\"\""
        },
        {
          "name": "empty_form",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "cleaned_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Return a list of form.cleaned_data dicts for every form in self.forms.\n        \"\"\""
        },
        {
          "name": "deleted_forms",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return a list of forms that have been marked for deletion.\"\"\""
        },
        {
          "name": "ordered_forms",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"\n        Return a list of form in the order specified by the incoming data.\n        Raise an AttributeError if ordering is not allowed.\n        \"\"\""
        },
        {
          "name": "get_default_prefix",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "get_deletion_widget",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "get_ordering_widget",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "non_form_errors",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\""
        },
        {
          "name": "errors",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ],
          "docstring": "\"\"\"Return a list of form.errors for every form in self.forms.\"\"\""
        },
        {
          "name": "total_error_count",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the number of errors across all forms in the formset.\"\"\""
        },
        {
          "name": "is_valid",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if every form in self.forms is valid.\"\"\""
        },
        {
          "name": "full_clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Clean all of self.data and populate self._errors and\n        self._non_form_errors.\n        \"\"\""
        },
        {
          "name": "clean",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Hook for doing any extra formset-wide cleaning after Form.clean() has\n        been called on every form. Any ValidationError raised by this method\n        will not be associated with a particular form; it will be accessible\n        via formset.non_form_errors()\n        \"\"\""
        },
        {
          "name": "has_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if data in any form differs from initial.\"\"\""
        },
        {
          "name": "add_fields",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "form",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "index",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"A hook for adding extra fields on to each form instance.\"\"\""
        },
        {
          "name": "add_prefix",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "index",
              "annotation": null
            }
          ]
        },
        {
          "name": "is_multipart",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return True if the formset needs to be multipart, i.e. it\n        has FileInput, or False otherwise.\n        \"\"\""
        },
        {
          "name": "media",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@property"
            }
          ]
        },
        {
          "name": "get_context",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A collection of instances of the same Form class.\n    \"\"\""
    }
  ]
}