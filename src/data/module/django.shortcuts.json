{
  "functions": [
    {
      "name": "render",
      "params": [
        {
          "prefix": "",
          "name": "request",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "template_name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "context",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "content_type",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "status",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "using",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return an HttpResponse whose content is filled with the result of calling\n    django.template.loader.render_to_string() with the passed arguments.\n    \"\"\""
    },
    {
      "name": "redirect",
      "params": [
        {
          "prefix": "",
          "name": "to",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "permanent",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return an HttpResponseRedirect to the appropriate URL for the arguments\n    passed.\n\n    The arguments could be:\n\n        * A model: the model's `get_absolute_url()` function will be called.\n\n        * A view name, possibly with arguments: `urls.reverse()` will be used\n          to reverse-resolve the name.\n\n        * A URL, which will be used as-is for the redirect location.\n\n    Issues a temporary redirect by default; pass permanent=True to issue a\n    permanent redirect.\n    \"\"\""
    },
    {
      "name": "get_object_or_404",
      "params": [
        {
          "prefix": "",
          "name": "klass",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Use get() to return an object, or raise an Http404 exception if the object\n    does not exist.\n\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the get() query.\n\n    Like with QuerySet.get(), MultipleObjectsReturned is raised if more than\n    one object is found.\n    \"\"\""
    },
    {
      "name": "get_list_or_404",
      "params": [
        {
          "prefix": "",
          "name": "klass",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Use filter() to return a list of objects, or raise an Http404 exception if\n    the list is empty.\n\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the filter() query.\n    \"\"\""
    },
    {
      "name": "resolve_url",
      "params": [
        {
          "prefix": "",
          "name": "to",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a URL appropriate for the arguments passed.\n\n    The arguments could be:\n\n        * A model: the model's `get_absolute_url()` function will be called.\n\n        * A view name, possibly with arguments: `urls.reverse()` will be used\n          to reverse-resolve the name.\n\n        * A URL, which will be returned as-is.\n    \"\"\""
    }
  ],
  "classes": [],
  "docstring": "\"\"\"\nThis module collects helper functions and classes that \"span\" multiple levels\nof MVC. In other words, these functions/classes introduce controlled coupling\nfor convenience's sake.\n\"\"\""
}