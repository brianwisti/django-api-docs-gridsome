{
  "functions": [
    {
      "name": "make_context",
      "params": [
        {
          "prefix": "",
          "name": "context",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "request",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Create a suitable Context from a plain dict and optionally an HttpRequest.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "ContextPopException",
      "methods": [],
      "classes": [],
      "docstring": "\"pop() has been called more times than push()\""
    },
    {
      "name": "ContextDict",
      "methods": [],
      "classes": []
    },
    {
      "name": "BaseContext",
      "methods": [
        {
          "name": "push",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "pop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "set_upward",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Set a variable in one of the higher contexts if it exists there,\n        otherwise in the current context.\n        \"\"\""
        },
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "otherwise",
              "annotation": null
            }
          ]
        },
        {
          "name": "setdefault",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            }
          ]
        },
        {
          "name": "new",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a new context with the same properties, but with only the\n        values given in 'values' stored.\n        \"\"\""
        },
        {
          "name": "flatten",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return self.dicts as one dictionary.\n        \"\"\""
        }
      ],
      "classes": []
    },
    {
      "name": "Context",
      "methods": [
        {
          "name": "bind_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@contextmanager"
            }
          ]
        },
        {
          "name": "update",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "other_dict",
              "annotation": null
            }
          ],
          "docstring": "\"Push other_dict to the stack of dictionaries in the Context\""
        }
      ],
      "classes": [],
      "docstring": "\"A stack container for variable context\""
    },
    {
      "name": "RenderContext",
      "methods": [
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "otherwise",
              "annotation": null
            }
          ]
        },
        {
          "name": "push_state",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "isolated_context",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@contextmanager"
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A stack container for storing Template state.\n\n    RenderContext simplifies the implementation of template Nodes by providing a\n    safe place to store state between invocations of a node's `render` method.\n\n    The RenderContext also provides scoping rules that are more sensible for\n    'template local' variables. The render context stack is pushed before each\n    template is rendered, creating a fresh scope with nothing in it. Name\n    resolution fails if a variable is not found at the top of the RequestContext\n    stack. Thus, variables are local to a specific template and don't affect the\n    rendering of other templates as they would if they were stored in the normal\n    template context.\n    \"\"\""
    },
    {
      "name": "RequestContext",
      "methods": [
        {
          "name": "bind_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@contextmanager"
            }
          ]
        },
        {
          "name": "new",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    This subclass of template.Context automatically populates itself using\n    the processors defined in the engine's configuration.\n    Additional processors can be specified as a list of callables\n    using the \"processors\" keyword argument.\n    \"\"\""
    }
  ]
}