{
  "functions": [
    {
      "name": "stringfilter",
      "params": [
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Decorator for filters which should only receive strings. The object\n    passed as the first positional argument will be converted to a string.\n    \"\"\""
    },
    {
      "name": "addslashes",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# STRINGS         #\n###################\n\n@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Add slashes before quotes. Useful for escaping strings in CSV, for\n    example. Less useful for escaping JavaScript; use the ``escapejs``\n    filter instead.\n    \"\"\""
    },
    {
      "name": "capfirst",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Capitalize the first character of the value.\"\"\""
    },
    {
      "name": "escapejs_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"escapejs\")"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Hex encode characters for use in JavaScript strings.\"\"\""
    },
    {
      "name": "json_script",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "element_id",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n    tag.\n    \"\"\""
    },
    {
      "name": "floatformat",
      "params": [
        {
          "prefix": "",
          "name": "text",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Display a float to a specified number of decimal places.\n\n    If called without an argument, display the floating point number with one\n    decimal place -- but only if there's a decimal place to be displayed:\n\n    * num1 = 34.23234\n    * num2 = 34.00000\n    * num3 = 34.26000\n    * {{ num1|floatformat }} displays \"34.2\"\n    * {{ num2|floatformat }} displays \"34\"\n    * {{ num3|floatformat }} displays \"34.3\"\n\n    If arg is positive, always display exactly arg number of decimal places:\n\n    * {{ num1|floatformat:3 }} displays \"34.232\"\n    * {{ num2|floatformat:3 }} displays \"34.000\"\n    * {{ num3|floatformat:3 }} displays \"34.260\"\n\n    If arg is negative, display arg number of decimal places -- but only if\n    there are places to be displayed:\n\n    * {{ num1|floatformat:\"-3\" }} displays \"34.232\"\n    * {{ num2|floatformat:\"-3\" }} displays \"34\"\n    * {{ num3|floatformat:\"-3\" }} displays \"34.260\"\n\n    If arg has the 'g' suffix, force the result to be grouped by the\n    THOUSAND_SEPARATOR for the active locale. When the active locale is\n    en (English):\n\n    * {{ 6666.6666|floatformat:\"2g\" }} displays \"6,666.67\"\n    * {{ 10000|floatformat:\"g\" }} displays \"10,000\"\n\n    If arg has the 'u' suffix, force the result to be unlocalized. When the\n    active locale is pl (Polish):\n\n    * {{ 66666.6666|floatformat:\"2\" }} displays \"66666,67\"\n    * {{ 66666.6666|floatformat:\"2u\" }} displays \"66666.67\"\n\n    If the input float is infinity or NaN, display the string representation\n    of that value.\n    \"\"\""
    },
    {
      "name": "iriencode",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Escape an IRI value for use in a URL.\"\"\""
    },
    {
      "name": "linenumbers",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Display text with line numbers.\"\"\""
    },
    {
      "name": "lower",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Convert a string into all lowercase.\"\"\""
    },
    {
      "name": "make_list",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Return the value turned into a list.\n\n    For an integer, it's a list of digits.\n    For a string, it's a list of characters.\n    \"\"\""
    },
    {
      "name": "slugify",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Convert to ASCII. Convert spaces to hyphens. Remove characters that aren't\n    alphanumerics, underscores, or hyphens. Convert to lowercase. Also strip\n    leading and trailing whitespace.\n    \"\"\""
    },
    {
      "name": "stringformat",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Format the variable according to the arg, a string formatting specifier.\n\n    This specifier uses Python string formatting syntax, with the exception\n    that the leading \"%\" is dropped.\n\n    See https://docs.python.org/library/stdtypes.html#printf-style-string-formatting\n    for documentation of Python string formatting.\n    \"\"\""
    },
    {
      "name": "title",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Convert a string into titlecase.\"\"\""
    },
    {
      "name": "truncatechars",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Truncate a string after `arg` number of characters.\"\"\""
    },
    {
      "name": "truncatechars_html",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Truncate HTML after `arg` number of chars.\n    Preserve newlines in the HTML.\n    \"\"\""
    },
    {
      "name": "truncatewords",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Truncate a string after `arg` number of words.\n    Remove newlines within the string.\n    \"\"\""
    },
    {
      "name": "truncatewords_html",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Truncate HTML after `arg` number of words.\n    Preserve newlines in the HTML.\n    \"\"\""
    },
    {
      "name": "upper",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Convert a string into all uppercase.\"\"\""
    },
    {
      "name": "urlencode",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "safe",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Escape a value for use in a URL.\n\n    The ``safe`` parameter determines the characters which should not be\n    escaped by Python's quote() function. If not provided, use the default safe\n    characters (but an empty string can be provided when *all* characters\n    should be escaped).\n    \"\"\""
    },
    {
      "name": "urlize",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Convert URLs in plain text into clickable links.\"\"\""
    },
    {
      "name": "urlizetrunc",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "limit",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Convert URLs into clickable links, truncating URLs to the given character\n    limit, and adding 'rel=nofollow' attribute to discourage spamming.\n\n    Argument: Length to truncate URLs to.\n    \"\"\""
    },
    {
      "name": "wordcount",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Return the number of words.\"\"\""
    },
    {
      "name": "wordwrap",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Wrap words at `arg` line length.\"\"\""
    },
    {
      "name": "ljust",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Left-align the value in a field of a given width.\"\"\""
    },
    {
      "name": "rjust",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Right-align the value in a field of a given width.\"\"\""
    },
    {
      "name": "center",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Center the value in a field of a given width.\"\"\""
    },
    {
      "name": "cut",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Remove all values of arg from the given string.\"\"\""
    },
    {
      "name": "escape_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# HTML STRINGS    #\n###################\n\n@register.filter(\"escape\", is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Mark the value as a string that should be auto-escaped.\"\"\""
    },
    {
      "name": "force_escape",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Escape a string's HTML. Return a new string containing the escaped\n    characters (as opposed to \"escape\", which marks the content for later\n    possible escaping).\n    \"\"\""
    },
    {
      "name": "linebreaks_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"linebreaks\", is_safe=True, needs_autoescape=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Replace line breaks in plain text with appropriate HTML; a single\n    newline becomes an HTML line break (``<br>``) and a new line\n    followed by a blank line becomes a paragraph break (``</p>``).\n    \"\"\""
    },
    {
      "name": "linebreaksbr",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"\n    Convert all newlines in a piece of plain text to HTML line breaks\n    (``<br>``).\n    \"\"\""
    },
    {
      "name": "safe",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Mark the value as a string that should not be auto-escaped.\"\"\""
    },
    {
      "name": "safeseq",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    A \"safe\" filter for sequences. Mark each element in the sequence,\n    individually, as safe, after converting them to strings. Return a list\n    with the results.\n    \"\"\""
    },
    {
      "name": "striptags",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        },
        {
          "name": "@stringfilter"
        }
      ],
      "docstring": "\"\"\"Strip all [X]HTML tags.\"\"\""
    },
    {
      "name": "dictsort",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Given a list of dicts, return that list sorted by the property given in\n    the argument.\n    \"\"\""
    },
    {
      "name": "dictsortreversed",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Given a list of dicts, return that list sorted in reverse order by the\n    property given in the argument.\n    \"\"\""
    },
    {
      "name": "first",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Return the first item in a list.\"\"\""
    },
    {
      "name": "join",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        }
      ],
      "docstring": "\"\"\"Join a list with a string, like Python's ``str.join(list)``.\"\"\""
    },
    {
      "name": "last",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"Return the last item in a list.\"\"\""
    },
    {
      "name": "length",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Return the length of the value - useful for lists.\"\"\""
    },
    {
      "name": "length_is",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Return a boolean of whether the value's length is the argument.\"\"\""
    },
    {
      "name": "random",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"Return a random item from the list.\"\"\""
    },
    {
      "name": "slice_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"slice\", is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Return a slice of the list using the same syntax as Python's list slicing.\n    \"\"\""
    },
    {
      "name": "unordered_list",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "autoescape",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True, needs_autoescape=True)"
        }
      ],
      "docstring": "\"\"\"\n    Recursively take a self-nested list and return an HTML unordered list --\n    WITHOUT opening and closing <ul> tags.\n\n    Assume the list is in the proper format. For example, if ``var`` contains:\n    ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then\n    ``{{ var|unordered_list }}`` returns::\n\n        <li>States\n        <ul>\n                <li>Kansas\n                <ul>\n                        <li>Lawrence</li>\n                        <li>Topeka</li>\n                </ul>\n                </li>\n                <li>Illinois</li>\n        </ul>\n        </li>\n    \"\"\""
    },
    {
      "name": "add",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# INTEGERS        #\n###################\n\n@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Add the arg to the value.\"\"\""
    },
    {
      "name": "get_digit",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Given a whole number, return the requested digit of it, where 1 is the\n    right-most digit, 2 is the second-right-most digit, etc. Return the\n    original value for invalid input (if input or argument is not an integer,\n    or if argument is less than 1). Otherwise, output is always an integer.\n    \"\"\""
    },
    {
      "name": "date",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# DATES           #\n###################\n\n@register.filter(expects_localtime=True, is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Format a date according to the given format.\"\"\""
    },
    {
      "name": "time",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(expects_localtime=True, is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Format a time according to the given format.\"\"\""
    },
    {
      "name": "timesince_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"timesince\", is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Format a date as the time since that date (i.e. \"4 days, 6 hours\").\"\"\""
    },
    {
      "name": "timeuntil_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"timeuntil\", is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Format a date as the time until that date (i.e. \"4 days, 6 hours\").\"\"\""
    },
    {
      "name": "default",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# LOGIC           #\n###################\n\n@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"If value is unavailable, use given default.\"\"\""
    },
    {
      "name": "default_if_none",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"If value is None, use given default.\"\"\""
    },
    {
      "name": "divisibleby",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"Return True if the value is divisible by the argument.\"\"\""
    },
    {
      "name": "yesno",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Given a string mapping values for true, false, and (optionally) None,\n    return one of those strings according to the value:\n\n    ==========  ======================  ==================================\n    Value       Argument                Outputs\n    ==========  ======================  ==================================\n    ``True``    ``\"yeah,no,maybe\"``     ``yeah``\n    ``False``   ``\"yeah,no,maybe\"``     ``no``\n    ``None``    ``\"yeah,no,maybe\"``     ``maybe``\n    ``None``    ``\"yeah,no\"``           ``\"no\"`` (converts None to False\n                                        if no mapping for None is given.\n    ==========  ======================  ==================================\n    \"\"\""
    },
    {
      "name": "filesizeformat",
      "params": [
        {
          "prefix": "",
          "name": "bytes_",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "###################\n# MISC            #\n###################\n\n@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"\n    Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n    102 bytes, etc.).\n    \"\"\""
    },
    {
      "name": "pluralize",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "arg",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=False)"
        }
      ],
      "docstring": "\"\"\"\n    Return a plural suffix if the value is not 1, '1', or an object of\n    length 1. By default, use 's' as the suffix:\n\n    * If value is 0, vote{{ value|pluralize }} display \"votes\".\n    * If value is 1, vote{{ value|pluralize }} display \"vote\".\n    * If value is 2, vote{{ value|pluralize }} display \"votes\".\n\n    If an argument is provided, use that string instead:\n\n    * If value is 0, class{{ value|pluralize:\"es\" }} display \"classes\".\n    * If value is 1, class{{ value|pluralize:\"es\" }} display \"class\".\n    * If value is 2, class{{ value|pluralize:\"es\" }} display \"classes\".\n\n    If the provided argument contains a comma, use the text before the comma\n    for the singular case and the text after the comma for the plural case:\n\n    * If value is 0, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n    * If value is 1, cand{{ value|pluralize:\"y,ies\" }} display \"candy\".\n    * If value is 2, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n    \"\"\""
    },
    {
      "name": "phone2numeric_filter",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(\"phone2numeric\", is_safe=True)"
        }
      ],
      "docstring": "\"\"\"Take a phone number and converts it in to its numerical equivalent.\"\"\""
    },
    {
      "name": "pprint",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.filter(is_safe=True)"
        }
      ],
      "docstring": "\"\"\"A wrapper around pprint.pprint -- for debugging, really.\"\"\""
    }
  ],
  "classes": [],
  "doc": "\"\"\"Default variable filters.\"\"\""
}