{
  "functions": [],
  "classes": [
    {
      "name": "Engine",
      "methods": [
        {
          "name": "get_default",
          "params": [],
          "decorators": [
            {
              "name": "@staticmethod"
            },
            {
              "name": "@functools.lru_cache()"
            }
          ],
          "docstring": "\"\"\"\n        Return the first DjangoTemplates backend that's configured, or raise\n        ImproperlyConfigured if none are configured.\n\n        This is required for preserving historical APIs that rely on a\n        globally available, implicitly configured engine such as:\n\n        >>> from django.template import Context, Template\n        >>> template = Template(\"Hello {{ name }}!\")\n        >>> context = Context({'name': \"world\"})\n        >>> template.render(context)\n        'Hello world!'\n        \"\"\""
        },
        {
          "name": "template_context_processors",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "get_template_builtins",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "builtins",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_template_libraries",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "libraries",
              "annotation": null
            }
          ]
        },
        {
          "name": "template_loaders",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "get_template_loaders",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_loaders",
              "annotation": null
            }
          ]
        },
        {
          "name": "find_template_loader",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "loader",
              "annotation": null
            }
          ]
        },
        {
          "name": "find_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "dirs",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "skip",
              "annotation": null
            }
          ]
        },
        {
          "name": "from_string",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_code",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a compiled Template object for the given template code,\n        handling template inheritance recursively.\n        \"\"\""
        },
        {
          "name": "get_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a compiled Template object for the given template name,\n        handling template inheritance recursively.\n        \"\"\""
        },
        {
          "name": "render_to_string",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Render the template specified by template_name with the given context.\n        For use in Django's test suite.\n        \"\"\""
        },
        {
          "name": "select_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name_list",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Given a list of template names, return the first that can be loaded.\n        \"\"\""
        }
      ],
      "classes": []
    }
  ]
}