{
  "functions": [
    {
      "name": "do_block",
      "params": [
        {
          "prefix": "",
          "name": "parser",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "token",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.tag('block')"
        }
      ],
      "docstring": "\"\"\"\n    Define a block that can be overridden by child templates.\n    \"\"\""
    },
    {
      "name": "construct_relative_path",
      "params": [
        {
          "prefix": "",
          "name": "current_template_name",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "relative_name",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert a relative path (starting with './' or '../') to the full template\n    name based on the current_template_name.\n    \"\"\""
    },
    {
      "name": "do_extends",
      "params": [
        {
          "prefix": "",
          "name": "parser",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "token",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.tag('extends')"
        }
      ],
      "docstring": "\"\"\"\n    Signal that this template extends a parent template.\n\n    This tag may be used in two ways: ``{% extends \"base\" %}`` (with quotes)\n    uses the literal value \"base\" as the name of the parent template to extend,\n    or ``{% extends variable %}`` uses the value of ``variable`` as either the\n    name of the parent template to extend (if it evaluates to a string) or as\n    the parent template itself (if it evaluates to a Template object).\n    \"\"\""
    },
    {
      "name": "do_include",
      "params": [
        {
          "prefix": "",
          "name": "parser",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "token",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@register.tag('include')"
        }
      ],
      "docstring": "\"\"\"\n    Load a template and render it with the current context. You can pass\n    additional context using keyword arguments.\n\n    Example::\n\n        {% include \"foo/some_include\" %}\n        {% include \"foo/some_include\" with bar=\"BAZZ!\" baz=\"BING!\" %}\n\n    Use the ``only`` argument to exclude the current context when rendering\n    the included template::\n\n        {% include \"foo/some_include\" only %}\n        {% include \"foo/some_include\" with bar=\"1\" only %}\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "BlockContext",
      "methods": [
        {
          "name": "add_blocks",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "blocks",
              "annotation": null
            }
          ]
        },
        {
          "name": "pop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ]
        },
        {
          "name": "push",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "block",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_block",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "name",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "BlockNode",
      "methods": [
        {
          "name": "render",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ]
        },
        {
          "name": "super",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ExtendsNode",
      "methods": [
        {
          "name": "find_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        This is a wrapper around engine.find_template(). A history is kept in\n        the render_context attribute between successive extends calls and\n        passed as the skip argument. This enables extends to work recursively\n        without extending the same template twice.\n        \"\"\""
        },
        {
          "name": "get_parent",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ]
        },
        {
          "name": "render",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "IncludeNode",
      "methods": [
        {
          "name": "render",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Render the specified template and context. Cache the template object\n        in render_context to avoid reparsing and loading when used in a for\n        loop.\n        \"\"\""
        }
      ],
      "classes": []
    }
  ]
}