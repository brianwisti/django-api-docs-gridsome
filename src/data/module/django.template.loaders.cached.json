{
  "functions": [],
  "classes": [
    {
      "name": "Loader",
      "methods": [
        {
          "name": "get_dirs",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_contents",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "origin",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_template",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "skip",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Perform the caching that gives this loader its name. Often many of the\n        templates attempted will be missing, so memory use is of concern here.\n        To keep it in check, caching behavior is a little complicated when a\n        template is not found. See ticket #26306 for more details.\n\n        With template debugging disabled, cache the TemplateDoesNotExist class\n        for every missing template and raise a new instance of it after\n        fetching it from the cache.\n\n        With template debugging enabled, a unique TemplateDoesNotExist object\n        is cached for each missing template to preserve debug data. When\n        raising an exception, Python sets __traceback__, __context__, and\n        __cause__ attributes on it. Those attributes can contain references to\n        all sorts of objects up the call chain and caching them creates a\n        memory leak. Thus, unraised copies of the exceptions are cached and\n        copies of those copies are raised after they're fetched from the cache.\n        \"\"\""
        },
        {
          "name": "get_template_sources",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            }
          ]
        },
        {
          "name": "cache_key",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "template_name",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "skip",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Generate a cache key for the template name and skip.\n\n        If skip is provided, only origins that match template_name are included\n        in the cache key. This ensures each template is only parsed and cached\n        once if contained in different extend chains like:\n\n            x -> a -> a\n            y -> a -> a\n            z -> a -> a\n        \"\"\""
        },
        {
          "name": "generate_hash",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "values",
              "annotation": null
            }
          ]
        },
        {
          "name": "reset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"Empty the template cache.\""
        }
      ],
      "classes": []
    }
  ],
  "docstring": "\"\"\"\nWrapper class that takes a list of template loaders as an argument and attempts\nto load templates from them in order, caching the result.\n\"\"\""
}