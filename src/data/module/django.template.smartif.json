{
  "functions": [
    {
      "name": "infix",
      "params": [
        {
          "prefix": "",
          "name": "bp",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Create an infix operator, given a binding power and a function that\n    evaluates the node.\n    \"\"\""
    },
    {
      "name": "prefix",
      "params": [
        {
          "prefix": "",
          "name": "bp",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Create a prefix operator, given a binding power and a function that\n    evaluates the node.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "TokenBase",
      "methods": [
        {
          "name": "nud",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parser",
              "annotation": null
            }
          ]
        },
        {
          "name": "led",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "left",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parser",
              "annotation": null
            }
          ]
        },
        {
          "name": "display",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return what to display in error messages for this node\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Base class for operators and literals, mainly for debugging and for throwing\n    syntax errors.\n    \"\"\""
    },
    {
      "name": "Literal",
      "methods": [
        {
          "name": "display",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "nud",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parser",
              "annotation": null
            }
          ]
        },
        {
          "name": "eval",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "context",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A basic self-resolvable object similar to a Django template variable.\n    \"\"\""
    },
    {
      "name": "EndToken",
      "methods": [
        {
          "name": "nud",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "parser",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "IfParser",
      "methods": [
        {
          "name": "translate_token",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "token",
              "annotation": null
            }
          ]
        },
        {
          "name": "next_token",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "parse",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "expression",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "rbp",
              "annotation": null
            }
          ]
        },
        {
          "name": "create_var",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "value",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    }
  ],
  "docstring": "\"\"\"\nParser and utilities for the smart 'if' tag\n\"\"\""
}