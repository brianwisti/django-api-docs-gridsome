{
  "functions": [
    {
      "name": "is_django_module",
      "params": [
        {
          "prefix": "",
          "name": "module",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return True if the given module is nested under Django.\"\"\""
    },
    {
      "name": "is_django_path",
      "params": [
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return True if the given file path is nested under Django.\"\"\""
    },
    {
      "name": "check_errors",
      "params": [
        {
          "prefix": "",
          "name": "fn",
          "annotation": null
        }
      ]
    },
    {
      "name": "raise_last_exception",
      "params": []
    },
    {
      "name": "ensure_echo_on",
      "params": [],
      "docstring": "\"\"\"\n    Ensure that echo mode is enabled. Some tools such as PDB disable\n    it which causes usability issues after reload.\n    \"\"\""
    },
    {
      "name": "iter_all_python_module_files",
      "params": []
    },
    {
      "name": "iter_modules_and_files",
      "params": [
        {
          "prefix": "",
          "name": "modules",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "extra_files",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=1)"
        }
      ],
      "docstring": "\"\"\"Iterate through all modules needed to be watched.\"\"\""
    },
    {
      "name": "common_roots",
      "params": [
        {
          "prefix": "",
          "name": "paths",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=1)"
        }
      ],
      "docstring": "\"\"\"\n    Return a tuple of common roots that are shared between the given paths.\n    File system watchers operate on directories and aren't cheap to create.\n    Try to find the minimum set of directories to watch that encompass all of\n    the files that need to be watched.\n    \"\"\""
    },
    {
      "name": "sys_path_directories",
      "params": [],
      "docstring": "\"\"\"\n    Yield absolute directories from sys.path, ignoring entries that don't\n    exist.\n    \"\"\""
    },
    {
      "name": "get_child_arguments",
      "params": [],
      "docstring": "\"\"\"\n    Return the executable. This contains a workaround for Windows if the\n    executable is reported to not have the .exe extension which can cause bugs\n    on reloading.\n    \"\"\""
    },
    {
      "name": "trigger_reload",
      "params": [
        {
          "prefix": "",
          "name": "filename",
          "annotation": null
        }
      ]
    },
    {
      "name": "restart_with_reloader",
      "params": []
    },
    {
      "name": "get_reloader",
      "params": [],
      "docstring": "\"\"\"Return the most suitable reloader for this environment.\"\"\""
    },
    {
      "name": "start_django",
      "params": [
        {
          "prefix": "",
          "name": "reloader",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "main_func",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ]
    },
    {
      "name": "run_with_reloader",
      "params": [
        {
          "prefix": "",
          "name": "main_func",
          "annotation": null
        },
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "BaseReloader",
      "methods": [
        {
          "name": "watch_dir",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "path",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "glob",
              "annotation": null
            }
          ]
        },
        {
          "name": "watched_files",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "include_globs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Yield all files that need to be watched, including module files and\n        files within globs.\n        \"\"\""
        },
        {
          "name": "wait_for_apps_ready",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "app_reg",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "django_main_thread",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Wait until Django reports that the apps have been loaded. If the given\n        thread has terminated before the apps are ready, then a SyntaxError or\n        other non-recoverable error has been raised. In that case, stop waiting\n        for the apps_ready event and continue processing.\n\n        Return True if the thread is alive and the ready event has been\n        triggered, or False if the thread is terminated while waiting for the\n        event.\n        \"\"\""
        },
        {
          "name": "run",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "django_main_thread",
              "annotation": null
            }
          ]
        },
        {
          "name": "run_loop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "tick",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        This generator is called in a loop from run_loop. It's important that\n        the method takes care of pausing or otherwise waiting for a period of\n        time. This split between run_loop() and tick() is to improve the\n        testability of the reloader implementations by decoupling the work they\n        do from the loop.\n        \"\"\""
        },
        {
          "name": "check_availability",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        },
        {
          "name": "notify_file_changed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "path",
              "annotation": null
            }
          ]
        },
        {
          "name": "should_stop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "# These are primarily used for testing.\n    @property"
            }
          ]
        },
        {
          "name": "stop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "StatReloader",
      "methods": [
        {
          "name": "tick",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "snapshot_files",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "check_availability",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "WatchmanUnavailable",
      "methods": [],
      "classes": []
    },
    {
      "name": "WatchmanReloader",
      "methods": [
        {
          "name": "client",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@cached_property"
            }
          ]
        },
        {
          "name": "watched_roots",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "watched_files",
              "annotation": null
            }
          ]
        },
        {
          "name": "update_watches",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "request_processed",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "tick",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "stop",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "check_server_status",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "inner_ex",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return True if the server is available.\"\"\""
        },
        {
          "name": "check_availability",
          "params": [
            {
              "prefix": "",
              "name": "cls",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "@classmethod"
            }
          ]
        }
      ],
      "classes": []
    }
  ]
}