{
  "functions": [
    {
      "name": "method_decorator",
      "params": [
        {
          "prefix": "",
          "name": "decorator",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "name",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert a function decorator into a method decorator\n    \"\"\""
    },
    {
      "name": "decorator_from_middleware_with_args",
      "params": [
        {
          "prefix": "",
          "name": "middleware_class",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Like decorator_from_middleware, but return a function\n    that accepts the arguments to be passed to the middleware_class.\n    Use like::\n\n         cache_page = decorator_from_middleware_with_args(CacheMiddleware)\n         # ...\n\n         @cache_page(3600)\n         def my_view(request):\n             # ...\n    \"\"\""
    },
    {
      "name": "decorator_from_middleware",
      "params": [
        {
          "prefix": "",
          "name": "middleware_class",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Given a middleware class (not an instance), return a view decorator. This\n    lets you use middleware functionality on a per-view basis. The middleware\n    is created with no params passed.\n    \"\"\""
    },
    {
      "name": "make_middleware_decorator",
      "params": [
        {
          "prefix": "",
          "name": "middleware_class",
          "annotation": null
        }
      ]
    },
    {
      "name": "sync_and_async_middleware",
      "params": [
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Mark a middleware factory as returning a hybrid middleware supporting both\n    types of request.\n    \"\"\""
    },
    {
      "name": "sync_only_middleware",
      "params": [
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Mark a middleware factory as returning a sync middleware.\n    This is the default.\n    \"\"\""
    },
    {
      "name": "async_only_middleware",
      "params": [
        {
          "prefix": "",
          "name": "func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Mark a middleware factory as returning an async middleware.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "classonlymethod",
      "methods": [],
      "classes": []
    }
  ],
  "docstring": "\"Functions that help with dynamically creating decorators for views.\""
}