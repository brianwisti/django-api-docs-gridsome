{
  "functions": [
    {
      "name": "smart_str",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "encoding",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strings_only",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "errors",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a string representing 's'. Treat bytestrings using the 'encoding'\n    codec.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    \"\"\""
    },
    {
      "name": "is_protected_type",
      "params": [
        {
          "prefix": "",
          "name": "obj",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Determine if the object instance is of a protected type.\n\n    Objects of protected types are preserved as-is when passed to\n    force_str(strings_only=True).\n    \"\"\""
    },
    {
      "name": "force_str",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "encoding",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strings_only",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "errors",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Similar to smart_str(), except that lazy instances are resolved to\n    strings, rather than kept as lazy objects.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    \"\"\""
    },
    {
      "name": "smart_bytes",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "encoding",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strings_only",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "errors",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a bytestring version of 's', encoded as specified in 'encoding'.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    \"\"\""
    },
    {
      "name": "force_bytes",
      "params": [
        {
          "prefix": "",
          "name": "s",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "encoding",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strings_only",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "errors",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Similar to smart_bytes, except that lazy instances are resolved to\n    strings, rather than kept as lazy objects.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    \"\"\""
    },
    {
      "name": "iri_to_uri",
      "params": [
        {
          "prefix": "",
          "name": "iri",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert an Internationalized Resource Identifier (IRI) portion to a URI\n    portion that is suitable for inclusion in a URL.\n\n    This is the algorithm from section 3.1 of RFC 3987, slightly simplified\n    since the input is assumed to be a string rather than an arbitrary byte\n    stream.\n\n    Take an IRI (string or UTF-8 bytes, e.g. '/I \u2665 Django/' or\n    b'/I \\xe2\\x99\\xa5 Django/') and return a string containing the encoded\n    result with ASCII chars only (e.g. '/I%20%E2%99%A5%20Django/').\n    \"\"\""
    },
    {
      "name": "uri_to_iri",
      "params": [
        {
          "prefix": "",
          "name": "uri",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert a Uniform Resource Identifier(URI) into an Internationalized\n    Resource Identifier(IRI).\n\n    This is the algorithm from section 3.2 of RFC 3987, excluding step 4.\n\n    Take an URI in ASCII bytes (e.g. '/I%20%E2%99%A5%20Django/') and return\n    a string containing the encoded result (e.g. '/I%20\u2665%20Django/').\n    \"\"\""
    },
    {
      "name": "escape_uri_path",
      "params": [
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Escape the unsafe characters from the path portion of a Uniform Resource\n    Identifier (URI).\n    \"\"\""
    },
    {
      "name": "punycode",
      "params": [
        {
          "prefix": "",
          "name": "domain",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return the Punycode of the given domain if it's non-ASCII.\"\"\""
    },
    {
      "name": "repercent_broken_unicode",
      "params": [
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    As per section 3.2 of RFC 3987, step three of converting a URI into an IRI,\n    repercent-encode any octet produced that is not part of a strictly legal\n    UTF-8 octet sequence.\n    \"\"\""
    },
    {
      "name": "filepath_to_uri",
      "params": [
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Convert a file system path to a URI portion that is suitable for\n    inclusion in a URL.\n\n    Encode certain chars that would normally be recognized as special chars\n    for URIs. Do not encode the ' character, as it is a valid character\n    within URIs. See the encodeURIComponent() JavaScript function for details.\n    \"\"\""
    },
    {
      "name": "get_system_encoding",
      "params": [],
      "docstring": "\"\"\"\n    The encoding of the default system locale. Fallback to 'ascii' if the\n    #encoding is unsupported by Python or could not be determined. See tickets\n    #10335 and #5846.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "DjangoUnicodeDecodeError",
      "methods": [],
      "classes": []
    }
  ]
}