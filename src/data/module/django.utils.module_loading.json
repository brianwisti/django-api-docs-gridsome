{
  "functions": [
    {
      "name": "cached_import",
      "params": [
        {
          "prefix": "",
          "name": "module_path",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "class_name",
          "annotation": null
        }
      ]
    },
    {
      "name": "import_string",
      "params": [
        {
          "prefix": "",
          "name": "dotted_path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Import a dotted module path and return the attribute/class designated by the\n    last name in the path. Raise ImportError if the import failed.\n    \"\"\""
    },
    {
      "name": "autodiscover_modules",
      "params": [
        {
          "prefix": "*",
          "name": "args",
          "annotation": null
        },
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Auto-discover INSTALLED_APPS modules and fail silently when\n    not present. This forces an import on them to register any admin bits they\n    may want.\n\n    You may provide a register_to keyword parameter as a way to access a\n    registry. This register_to object must have a _registry instance variable\n    to access it.\n    \"\"\""
    },
    {
      "name": "module_has_submodule",
      "params": [
        {
          "prefix": "",
          "name": "package",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "module_name",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"See if 'module' is in 'package'.\"\"\""
    },
    {
      "name": "module_dir",
      "params": [
        {
          "prefix": "",
          "name": "module",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Find the name of the directory that contains a module, if possible.\n\n    Raise ValueError otherwise, e.g. for namespace packages that are split\n    over several directories.\n    \"\"\""
    }
  ],
  "classes": []
}