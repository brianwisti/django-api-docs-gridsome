{
  "functions": [
    {
      "name": "normalize",
      "params": [
        {
          "prefix": "",
          "name": "pattern",
          "annotation": null
        }
      ],
      "docstring": "r\"\"\"\n    Given a reg-exp pattern, normalize it to an iterable of forms that\n    suffice for reverse matching. This does the following:\n\n    (1) For any repeating sections, keeps the minimum number of occurrences\n        permitted (this means zero for optional groups).\n    (2) If an optional group includes parameters, include one occurrence of\n        that group (along with the zero occurrence case from step (1)).\n    (3) Select the first (essentially an arbitrary) element from any character\n        class. Select an arbitrary character for any unordered class (e.g. '.'\n        or '\\w') in the pattern.\n    (4) Ignore look-ahead and look-behind assertions.\n    (5) Raise an error on any disjunctive ('|') constructs.\n\n    Django's URLs for forward resolving are either all positional arguments or\n    all keyword arguments. That is assumed here, as well. Although reverse\n    resolving can be done using positional args when keyword args are\n    specified, the two cannot be mixed in the same reverse() call.\n    \"\"\""
    },
    {
      "name": "next_char",
      "params": [
        {
          "prefix": "",
          "name": "input_iter",
          "annotation": null
        }
      ],
      "docstring": "r\"\"\"\n    An iterator that yields the next character from \"pattern_iter\", respecting\n    escape sequences. An escaped character is replaced by a representative of\n    its class (e.g. \\w -> \"x\"). If the escaped character is one that is\n    skipped, it is not returned (the next character is returned instead).\n\n    Yield the next character, along with a boolean indicating whether it is a\n    raw (unescaped) character or not.\n    \"\"\""
    },
    {
      "name": "walk_to_end",
      "params": [
        {
          "prefix": "",
          "name": "ch",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "input_iter",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    The iterator is currently inside a capturing group. Walk to the close of\n    this group, skipping over any nested groups and handling escaped\n    parentheses correctly.\n    \"\"\""
    },
    {
      "name": "get_quantifier",
      "params": [
        {
          "prefix": "",
          "name": "ch",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "input_iter",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Parse a quantifier from the input, where \"ch\" is the first character in the\n    quantifier.\n\n    Return the minimum number of occurrences permitted by the quantifier and\n    either None or the next character from the input_iter if the next character\n    is not part of the quantifier.\n    \"\"\""
    },
    {
      "name": "contains",
      "params": [
        {
          "prefix": "",
          "name": "source",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "inst",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return True if the \"source\" contains an instance of \"inst\". False,\n    otherwise.\n    \"\"\""
    },
    {
      "name": "flatten_result",
      "params": [
        {
          "prefix": "",
          "name": "source",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Turn the given source sequence into a list of reg-exp possibilities and\n    their arguments. Return a list of strings and a list of argument lists.\n    Each of the two lists will be of the same length.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "Choice",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Represent multiple possibilities at this point in a pattern string.\"\"\""
    },
    {
      "name": "Group",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Represent a capturing group in the pattern string.\"\"\""
    },
    {
      "name": "NonCapture",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Represent a non-capturing group in the pattern string.\"\"\""
    }
  ],
  "doc": "\"\"\"\nFunctions for reversing a regular expression (used in reverse URL resolving).\nUsed internally by Django and not intended for external use.\n\nThis is not, and is not intended to be, a complete reg-exp decompiler. It\nshould be good enough for a large class of URLS, however.\n\"\"\""
}