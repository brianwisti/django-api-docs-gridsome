{
  "functions": [
    {
      "name": "get_fixed_timezone",
      "params": [
        {
          "prefix": "",
          "name": "offset",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Return a tzinfo instance with a fixed offset from UTC.\"\"\""
    },
    {
      "name": "get_default_timezone",
      "params": [],
      "decorators": [
        {
          "name": "# In order to avoid accessing settings at compile time,\n# wrap the logic in a function and cache the result.\n@functools.lru_cache()"
        }
      ],
      "docstring": "\"\"\"\n    Return the default time zone as a tzinfo instance.\n\n    This is the time zone defined by settings.TIME_ZONE.\n    \"\"\""
    },
    {
      "name": "get_default_timezone_name",
      "params": [],
      "docstring": "\"\"\"Return the name of the default time zone.\"\"\""
    },
    {
      "name": "get_current_timezone",
      "params": [],
      "docstring": "\"\"\"Return the currently active time zone as a tzinfo instance.\"\"\""
    },
    {
      "name": "get_current_timezone_name",
      "params": [],
      "docstring": "\"\"\"Return the name of the currently active time zone.\"\"\""
    },
    {
      "name": "activate",
      "params": [
        {
          "prefix": "",
          "name": "timezone",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Set the time zone for the current thread.\n\n    The ``timezone`` argument must be an instance of a tzinfo subclass or a\n    time zone name.\n    \"\"\""
    },
    {
      "name": "deactivate",
      "params": [],
      "docstring": "\"\"\"\n    Unset the time zone for the current thread.\n\n    Django will then use the time zone defined by settings.TIME_ZONE.\n    \"\"\""
    },
    {
      "name": "template_localtime",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "use_tz",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Check if value is a datetime and converts it to local time if necessary.\n\n    If use_tz is provided and is not None, that will force the value to\n    be converted (or not), overriding the value of settings.USE_TZ.\n\n    This function is designed for use by the template engine.\n    \"\"\""
    },
    {
      "name": "localtime",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "timezone",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert an aware datetime.datetime to local time.\n\n    Only aware datetimes are allowed. When value is omitted, it defaults to\n    now().\n\n    Local time is defined by the current time zone, unless another time zone\n    is specified.\n    \"\"\""
    },
    {
      "name": "localdate",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "timezone",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Convert an aware datetime to local time and return the value's date.\n\n    Only aware datetimes are allowed. When value is omitted, it defaults to\n    now().\n\n    Local time is defined by the current time zone, unless another time zone is\n    specified.\n    \"\"\""
    },
    {
      "name": "now",
      "params": [],
      "docstring": "\"\"\"\n    Return an aware or naive datetime.datetime, depending on settings.USE_TZ.\n    \"\"\""
    },
    {
      "name": "is_aware",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Determine if a given datetime.datetime is aware.\n\n    The concept is defined in Python's docs:\n    https://docs.python.org/library/datetime.html#datetime.tzinfo\n\n    Assuming value.tzinfo is either None or a proper datetime.tzinfo,\n    value.utcoffset() implements the appropriate logic.\n    \"\"\""
    },
    {
      "name": "is_naive",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Determine if a given datetime.datetime is naive.\n\n    The concept is defined in Python's docs:\n    https://docs.python.org/library/datetime.html#datetime.tzinfo\n\n    Assuming value.tzinfo is either None or a proper datetime.tzinfo,\n    value.utcoffset() implements the appropriate logic.\n    \"\"\""
    },
    {
      "name": "make_aware",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "timezone",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "is_dst",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Make a naive datetime.datetime in a given time zone aware.\"\"\""
    },
    {
      "name": "make_naive",
      "params": [
        {
          "prefix": "",
          "name": "value",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "timezone",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"Make an aware datetime.datetime naive in a given time zone.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "override",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Temporarily set the time zone for the current thread.\n\n    This is a context manager that uses django.utils.timezone.activate()\n    to set the timezone on entry and restores the previously active timezone\n    on exit.\n\n    The ``timezone`` argument must be an instance of a ``tzinfo`` subclass, a\n    time zone name, or ``None``. If it is ``None``, Django enables the default\n    time zone.\n    \"\"\""
    }
  ],
  "docstring": "\"\"\"\nTimezone-related classes and functions.\n\"\"\""
}