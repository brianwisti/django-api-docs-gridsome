{
  "functions": [
    {
      "name": "reset_cache",
      "params": [
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@receiver(setting_changed)"
        }
      ],
      "docstring": "\"\"\"\n    Reset global state when LANGUAGES setting has been changed, as some\n    languages should no longer be accepted.\n    \"\"\""
    },
    {
      "name": "translation",
      "params": [
        {
          "prefix": "",
          "name": "language",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a translation object in the default 'django' domain.\n    \"\"\""
    },
    {
      "name": "activate",
      "params": [
        {
          "prefix": "",
          "name": "language",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Fetch the translation object for a given language and install it as the\n    current translation object for the current thread.\n    \"\"\""
    },
    {
      "name": "deactivate",
      "params": [],
      "docstring": "\"\"\"\n    Uninstall the active translation object so that further _() calls resolve\n    to the default translation object.\n    \"\"\""
    },
    {
      "name": "deactivate_all",
      "params": [],
      "docstring": "\"\"\"\n    Make the active translation object a NullTranslations() instance. This is\n    useful when we want delayed translations to appear as the original string\n    for some reason.\n    \"\"\""
    },
    {
      "name": "get_language",
      "params": [],
      "docstring": "\"\"\"Return the currently selected language.\"\"\""
    },
    {
      "name": "get_language_bidi",
      "params": [],
      "docstring": "\"\"\"\n    Return selected language's BiDi layout.\n\n    * False = left-to-right layout\n    * True = right-to-left layout\n    \"\"\""
    },
    {
      "name": "catalog",
      "params": [],
      "docstring": "\"\"\"\n    Return the current active catalog for further processing.\n    This can be used if you need to modify the catalog or want to access the\n    whole message catalog instead of just translating one string.\n    \"\"\""
    },
    {
      "name": "gettext",
      "params": [
        {
          "prefix": "",
          "name": "message",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Translate the 'message' string. It uses the current thread to find the\n    translation object to use. If no current translation is activated, the\n    message will be run through the default translation object.\n    \"\"\""
    },
    {
      "name": "pgettext",
      "params": [
        {
          "prefix": "",
          "name": "context",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "message",
          "annotation": null
        }
      ]
    },
    {
      "name": "gettext_noop",
      "params": [
        {
          "prefix": "",
          "name": "message",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Mark strings for translation but don't translate them now. This can be\n    used to store strings in global variables that should stay in the base\n    language (because they might be used externally) and will be translated\n    later.\n    \"\"\""
    },
    {
      "name": "do_ntranslate",
      "params": [
        {
          "prefix": "",
          "name": "singular",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "plural",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "number",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "translation_function",
          "annotation": null
        }
      ]
    },
    {
      "name": "ngettext",
      "params": [
        {
          "prefix": "",
          "name": "singular",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "plural",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "number",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return a string of the translation of either the singular or plural,\n    based on the number.\n    \"\"\""
    },
    {
      "name": "npgettext",
      "params": [
        {
          "prefix": "",
          "name": "context",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "singular",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "plural",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "number",
          "annotation": null
        }
      ]
    },
    {
      "name": "all_locale_paths",
      "params": [],
      "docstring": "\"\"\"\n    Return a list of paths to user-provides languages files.\n    \"\"\""
    },
    {
      "name": "check_for_language",
      "params": [
        {
          "prefix": "",
          "name": "lang_code",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=1000)"
        }
      ],
      "docstring": "\"\"\"\n    Check whether there is a global language file for the given language\n    code. This is used to decide whether a user-provided language is\n    available.\n\n    lru_cache should have a maxsize to prevent from memory exhaustion attacks,\n    as the provided language codes are taken from the HTTP request. See also\n    <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.\n    \"\"\""
    },
    {
      "name": "get_languages",
      "params": [],
      "decorators": [
        {
          "name": "@functools.lru_cache()"
        }
      ],
      "docstring": "\"\"\"\n    Cache of settings.LANGUAGES in a dictionary for easy lookups by key.\n    \"\"\""
    },
    {
      "name": "get_supported_language_variant",
      "params": [
        {
          "prefix": "",
          "name": "lang_code",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strict",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=1000)"
        }
      ],
      "docstring": "\"\"\"\n    Return the language code that's listed in supported languages, possibly\n    selecting a more generic variant. Raise LookupError if nothing is found.\n\n    If `strict` is False (the default), look for a country-specific variant\n    when neither the language code nor its generic variant is found.\n\n    lru_cache should have a maxsize to prevent from memory exhaustion attacks,\n    as the provided language codes are taken from the HTTP request. See also\n    <https://www.djangoproject.com/weblog/2007/oct/26/security-fix/>.\n    \"\"\""
    },
    {
      "name": "get_language_from_path",
      "params": [
        {
          "prefix": "",
          "name": "path",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "strict",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Return the language code if there's a valid language code found in `path`.\n\n    If `strict` is False (the default), look for a country-specific variant\n    when neither the language code nor its generic variant is found.\n    \"\"\""
    },
    {
      "name": "get_language_from_request",
      "params": [
        {
          "prefix": "",
          "name": "request",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "check_path",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Analyze the request to find what language the user wants the system to\n    show. Only languages listed in settings.LANGUAGES are taken into account.\n    If the user requests a sublanguage where we have a main language, we send\n    out the main language.\n\n    If check_path is True, the URL path prefix will be checked for a language\n    code, otherwise this is skipped for backwards compatibility.\n    \"\"\""
    },
    {
      "name": "parse_accept_lang_header",
      "params": [
        {
          "prefix": "",
          "name": "lang_string",
          "annotation": null
        }
      ],
      "decorators": [
        {
          "name": "@functools.lru_cache(maxsize=1000)"
        }
      ],
      "docstring": "\"\"\"\n    Parse the lang_string, which is the body of an HTTP Accept-Language\n    header, and return a tuple of (lang, q-value), ordered by 'q' values.\n\n    Return an empty tuple if there are any format errors in lang_string.\n    \"\"\""
    }
  ],
  "classes": [
    {
      "name": "TranslationCatalog",
      "methods": [
        {
          "name": "items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "keys",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ]
        },
        {
          "name": "update",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "trans",
              "annotation": null
            }
          ]
        },
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "key",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "default",
              "annotation": null
            }
          ]
        },
        {
          "name": "plural",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "msgid",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "num",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Simulate a dict for DjangoTranslation._catalog so as multiple catalogs\n    with different plural equations are kept separate.\n    \"\"\""
    },
    {
      "name": "DjangoTranslation",
      "methods": [
        {
          "name": "merge",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "other",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Merge another translation into this catalog.\"\"\""
        },
        {
          "name": "language",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the translation language.\"\"\""
        },
        {
          "name": "to_language",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the translation language name.\"\"\""
        },
        {
          "name": "ngettext",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "msgid1",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "msgid2",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "n",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Set up the GNUTranslations context with regard to output charset.\n\n    This translation object will be constructed out of multiple GNUTranslations\n    objects by merging their catalogs. It will construct an object for the\n    requested language and add a fallback to the default language, if it's\n    different from the requested language.\n    \"\"\""
    }
  ],
  "doc": "\"\"\"Translation helper functions.\"\"\""
}