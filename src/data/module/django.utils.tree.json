{
  "functions": [],
  "classes": [
    {
      "name": "Node",
      "methods": [
        {
          "name": "add",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "data",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "conn_type",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Combine this tree and the data represented by data using the\n        connector conn_type. The combine is done by squashing the node other\n        away if possible.\n\n        This tree (self) will never be pushed to a child node of the\n        combined tree, nor will the connector or negated properties change.\n\n        Return a node which can be used in place of data regardless if the\n        node other got squashed or not.\n        \"\"\""
        },
        {
          "name": "negate",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Negate the sense of the root connector.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    A single internal node in the tree graph. A Node should be viewed as a\n    connection (the root) with the children being either leaf nodes or other\n    Node instances.\n    \"\"\""
    }
  ],
  "docstring": "\"\"\"\nA class for storing a tree graph. Primarily used for filter constructs in the\nORM.\n\"\"\""
}