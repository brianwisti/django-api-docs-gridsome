{
  "functions": [
    {
      "name": "cache_page",
      "params": [
        {
          "prefix": "",
          "name": "timeout",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "cache",
          "annotation": null
        },
        {
          "prefix": "",
          "name": "key_prefix",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Decorator for views that tries getting the page from the cache and\n    populates the cache if the page isn't in the cache yet.\n\n    The cache is keyed by the URL and some data from the headers.\n    Additionally there is the key prefix that is used to distinguish different\n    cache areas in a multi-site setup. You could use the\n    get_current_site().domain, for example, as that is unique across a Django\n    project.\n\n    Additionally, all headers from the response's Vary header will be taken\n    into account on caching -- just like the middleware does.\n    \"\"\""
    },
    {
      "name": "cache_control",
      "params": [
        {
          "prefix": "**",
          "name": "kwargs",
          "annotation": null
        }
      ]
    },
    {
      "name": "never_cache",
      "params": [
        {
          "prefix": "",
          "name": "view_func",
          "annotation": null
        }
      ],
      "docstring": "\"\"\"\n    Decorator that adds headers to a response so that it will never be cached.\n    \"\"\""
    }
  ],
  "classes": []
}