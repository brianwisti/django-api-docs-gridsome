{
  "functions": [
    {
      "name": "timezone_today",
      "params": [],
      "docstring": "\"\"\"Return the current date in the current time zone.\"\"\""
    }
  ],
  "classes": [
    {
      "name": "YearMixin",
      "methods": [
        {
          "name": "get_year_format",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a year format string in strptime syntax to be used to parse the\n        year from url variables.\n        \"\"\""
        },
        {
          "name": "get_year",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the year for which this view should display data.\"\"\""
        },
        {
          "name": "get_next_year",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the next valid year.\"\"\""
        },
        {
          "name": "get_previous_year",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the previous valid year.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin for views manipulating year-based data.\"\"\""
    },
    {
      "name": "MonthMixin",
      "methods": [
        {
          "name": "get_month_format",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a month format string in strptime syntax to be used to parse the\n        month from url variables.\n        \"\"\""
        },
        {
          "name": "get_month",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the month for which this view should display data.\"\"\""
        },
        {
          "name": "get_next_month",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the next valid month.\"\"\""
        },
        {
          "name": "get_previous_month",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the previous valid month.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin for views manipulating month-based data.\"\"\""
    },
    {
      "name": "DayMixin",
      "methods": [
        {
          "name": "get_day_format",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a day format string in strptime syntax to be used to parse the day\n        from url variables.\n        \"\"\""
        },
        {
          "name": "get_day",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the day for which this view should display data.\"\"\""
        },
        {
          "name": "get_next_day",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the next valid day.\"\"\""
        },
        {
          "name": "get_previous_day",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the previous valid day.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin for views manipulating day-based data.\"\"\""
    },
    {
      "name": "WeekMixin",
      "methods": [
        {
          "name": "get_week_format",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a week format string in strptime syntax to be used to parse the\n        week from url variables.\n        \"\"\""
        },
        {
          "name": "get_week",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the week for which this view should display data.\"\"\""
        },
        {
          "name": "get_next_week",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the next valid week.\"\"\""
        },
        {
          "name": "get_previous_week",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the previous valid week.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin for views manipulating week-based data.\"\"\""
    },
    {
      "name": "DateMixin",
      "methods": [
        {
          "name": "get_date_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the name of the date field to be used to filter by.\"\"\""
        },
        {
          "name": "get_allow_future",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return `True` if the view should be allowed to display objects from\n        the future.\n        \"\"\""
        },
        {
          "name": "uses_datetime_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "decorators": [
            {
              "name": "# Note: the following three methods only work in subclasses that also\n    # inherit SingleObjectMixin or MultipleObjectMixin.\n\n    @cached_property"
            }
          ],
          "docstring": "\"\"\"\n        Return `True` if the date field is a `DateTimeField` and `False`\n        if it's a `DateField`.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin class for views manipulating date-based data.\"\"\""
    },
    {
      "name": "BaseDateListView",
      "methods": [
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "request",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        },
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Obtain the list of dates and items.\"\"\""
        },
        {
          "name": "get_ordering",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the field or fields to use for ordering the queryset; use the\n        date field by default.\n        \"\"\""
        },
        {
          "name": "get_dated_queryset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "lookup",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a queryset properly filtered according to `allow_future` and any\n        extra lookup kwargs.\n        \"\"\""
        },
        {
          "name": "get_date_list_period",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get the aggregation period for the list of dates: 'year', 'month', or\n        'day'.\n        \"\"\""
        },
        {
          "name": "get_date_list",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "date_type",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "ordering",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get a date list by calling `queryset.dates/datetimes()`, checking\n        along the way for empty lists that aren't allowed.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Abstract base class for date-based views displaying a list of objects.\"\"\""
    },
    {
      "name": "BaseArchiveIndexView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Base class for archives of date-based items. Requires a response mixin.\n    \"\"\""
    },
    {
      "name": "ArchiveIndexView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"Top-level archive of date-based items.\"\"\""
    },
    {
      "name": "BaseYearArchiveView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        },
        {
          "name": "get_make_object_list",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return `True` if this view should contain the full list of objects in\n        the given year.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given year.\"\"\""
    },
    {
      "name": "YearArchiveView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given year.\"\"\""
    },
    {
      "name": "BaseMonthArchiveView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given month.\"\"\""
    },
    {
      "name": "MonthArchiveView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given month.\"\"\""
    },
    {
      "name": "BaseWeekArchiveView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given week.\"\"\""
    },
    {
      "name": "WeekArchiveView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"List of objects published in a given week.\"\"\""
    },
    {
      "name": "BaseDayArchiveView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"List of objects published on a given day.\"\"\""
    },
    {
      "name": "DayArchiveView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"List of objects published on a given day.\"\"\""
    },
    {
      "name": "BaseTodayArchiveView",
      "methods": [
        {
          "name": "get_dated_items",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return (date_list, items, extra_context) for this request.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"List of objects published today.\"\"\""
    },
    {
      "name": "TodayArchiveView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"List of objects published today.\"\"\""
    },
    {
      "name": "BaseDateDetailView",
      "methods": [
        {
          "name": "get_object",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the object this request displays.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\""
    },
    {
      "name": "DateDetailView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    \"\"\""
    }
  ]
}