{
  "functions": [],
  "classes": [
    {
      "name": "SingleObjectMixin",
      "methods": [
        {
          "name": "get_object",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the object the view is displaying.\n\n        Require `self.queryset` and a `pk` or `slug` argument in the URLconf.\n        Subclasses can override this to return any object.\n        \"\"\""
        },
        {
          "name": "get_queryset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the `QuerySet` that will be used to look up the object.\n\n        This method is called by the default implementation of get_object() and\n        may not be called if get_object() is overridden.\n        \"\"\""
        },
        {
          "name": "get_slug_field",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the name of a slug field to be used to look up by slug.\"\"\""
        },
        {
          "name": "get_context_object_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "obj",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the name to use for the object.\"\"\""
        },
        {
          "name": "get_context_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Insert the single object into the context dict.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"\n    Provide the ability to retrieve a single object for further manipulation.\n    \"\"\""
    },
    {
      "name": "BaseDetailView",
      "methods": [
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "request",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"A base view for displaying a single object.\"\"\""
    },
    {
      "name": "SingleObjectTemplateResponseMixin",
      "methods": [
        {
          "name": "get_template_names",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a list of template names to be used for the request. May not be\n        called if render_to_response() is overridden. Return the following list:\n\n        * the value of ``template_name`` on the view (if provided)\n        * the contents of the ``template_name_field`` field on the\n          object instance that the view is operating upon (if available)\n        * ``<app_label>/<model_name><template_name_suffix>.html``\n        \"\"\""
        }
      ],
      "classes": []
    },
    {
      "name": "DetailView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Render a \"detail\" view of an object.\n\n    By default this is a model instance looked up from `self.queryset`, but the\n    view will support display of *any* object by overriding `self.get_object()`.\n    \"\"\""
    }
  ]
}