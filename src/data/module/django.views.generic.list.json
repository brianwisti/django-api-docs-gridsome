{
  "functions": [],
  "classes": [
    {
      "name": "MultipleObjectMixin",
      "methods": [
        {
          "name": "get_queryset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the list of items for this view.\n\n        The return value must be an iterable and may be an instance of\n        `QuerySet` in which case `QuerySet` specific behavior will be enabled.\n        \"\"\""
        },
        {
          "name": "get_ordering",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return the field or fields to use for ordering the queryset.\"\"\""
        },
        {
          "name": "paginate_queryset",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "page_size",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Paginate the queryset, if needed.\"\"\""
        },
        {
          "name": "get_paginate_by",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Get the number of items to paginate by, or ``None`` for no pagination.\n        \"\"\""
        },
        {
          "name": "get_paginator",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "queryset",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "per_page",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "orphans",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "allow_empty_first_page",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Return an instance of the paginator for this view.\"\"\""
        },
        {
          "name": "get_paginate_orphans",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return the maximum number of orphans extend the last page by when\n        paginating.\n        \"\"\""
        },
        {
          "name": "get_allow_empty",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return ``True`` if the view should display empty lists and ``False``\n        if a 404 should be raised instead.\n        \"\"\""
        },
        {
          "name": "get_context_object_name",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "object_list",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the name of the item to be used in the context.\"\"\""
        },
        {
          "name": "get_context_data",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "object_list",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"Get the context for this view.\"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"A mixin for views manipulating multiple objects.\"\"\""
    },
    {
      "name": "BaseListView",
      "methods": [
        {
          "name": "get",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            },
            {
              "prefix": "",
              "name": "request",
              "annotation": null
            },
            {
              "prefix": "*",
              "name": "args",
              "annotation": null
            },
            {
              "prefix": "**",
              "name": "kwargs",
              "annotation": null
            }
          ]
        }
      ],
      "classes": [],
      "docstring": "\"\"\"A base view for displaying a list of objects.\"\"\""
    },
    {
      "name": "MultipleObjectTemplateResponseMixin",
      "methods": [
        {
          "name": "get_template_names",
          "params": [
            {
              "prefix": "",
              "name": "self",
              "annotation": null
            }
          ],
          "docstring": "\"\"\"\n        Return a list of template names to be used for the request. Must return\n        a list. May not be called if render_to_response is overridden.\n        \"\"\""
        }
      ],
      "classes": [],
      "docstring": "\"\"\"Mixin for responding with a template and list of objects.\"\"\""
    },
    {
      "name": "ListView",
      "methods": [],
      "classes": [],
      "docstring": "\"\"\"\n    Render some list of objects, set by `self.model` or `self.queryset`.\n    `self.queryset` can actually be any iterable of items, not just a queryset.\n    \"\"\""
    }
  ]
}